#!/usr/bin/env python3
"""
üéØ –ê–ù–°–ê–ú–ë–õ–¨ –ú–û–î–ï–õ–ï–ô - FASHIONCLIP + YOLO + RESNET
"""

from fashion_clip import FashionCLIPAnalyzer
from yolo_detector import YOLODetector
from resnet_analyzer import ResNetAnalyzer
from PIL import Image
import numpy as np

class FashionEnsemble:
    def __init__(self):
        """–ê–Ω—Å–∞–º–±–ª—å –∏–∑ —Ç—Ä–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª—è –º–æ–¥–µ–ª–µ–π...")
        
        self.fashion_clip = FashionCLIPAnalyzer()
        self.yolo = YOLODetector()
        self.resnet = ResNetAnalyzer()
        
        print("‚úÖ –ê–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π –≥–æ—Ç–æ–≤!")
    
    def analyze_image(self, image: Image.Image) -> dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏
            clip_results = self.fashion_clip.analyze_image(image)
            yolo_results = self.yolo.detect_clothing(image)
            resnet_results = self.resnet.analyze_image(image)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            combined_analysis = self._combine_results(
                clip_results, yolo_results, resnet_results
            )
            
            return combined_analysis
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω—Å–∞–º–±–ª—è: {str(e)}"}
    
    def _combine_results(self, clip: dict, yolo: dict, resnet: dict) -> dict:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        analysis = {
            'models_used': ['FashionCLIP', 'YOLO', 'ResNet'],
            'combined_confidence': 0.0
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        if 'error' not in clip:
            analysis['fashion_clip'] = clip
        if 'error' not in yolo:
            analysis['yolo'] = yolo
        if 'error' not in resnet:
            analysis['resnet'] = resnet
        
        # –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        summary = self._create_summary(clip, yolo, resnet)
        analysis['summary'] = summary
        
        return analysis
    
    def _create_summary(self, clip: dict, yolo: dict, resnet: dict) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"""
        summary = {}
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç FashionCLIP
        if 'error' not in clip and 'garment_category' in clip:
            garment = clip['garment_category']['best_match']
            summary['garment_type'] = garment['item']
            summary['garment_confidence'] = garment['confidence']
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç YOLO
        if 'error' not in yolo:
            summary['detected_items'] = yolo.get('total_items', 0)
            summary['detection_region'] = yolo.get('dominant_region', 'unknown')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç ResNet
        if 'error' not in resnet:
            if 'color_analysis' in resnet:
                summary['dominant_colors'] = resnet['color_analysis'].get('dominant_colors', [])
            summary['texture_complexity'] = resnet.get('texture_complexity', 'unknown')
        
        # –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidences = []
        if 'garment_confidence' in summary:
            confidences.append(summary['garment_confidence'])
        if 'detected_items' in summary and summary['detected_items'] > 0:
            confidences.append(0.8)  # YOLO –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ–±—ä–µ–∫—Ç—ã
        
        if confidences:
            summary['overall_confidence'] = np.mean(confidences)
        else:
            summary['overall_confidence'] = 0.5
        
        return summary
    
    def get_detailed_description(self, analysis: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        if 'error' in analysis:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis['error']}"
        
        summary = analysis.get('summary', {})
        
        description_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if 'garment_type' in summary:
            description_parts.append(f"üëï **–¢–∏–ø –æ–¥–µ–∂–¥—ã:** {summary['garment_type']}")
            description_parts.append(f"üéØ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {summary.get('garment_confidence', 0):.1%}")
        
        # –î–µ—Ç–µ–∫—Ü–∏—è
        if 'detected_items' in summary:
            description_parts.append(f"üîç **–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:** {summary['detected_items']}")
        
        # –¶–≤–µ—Ç–∞
        if 'dominant_colors' in summary:
            colors = summary['dominant_colors']
            description_parts.append(f"üé® **–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞:** {', '.join(colors)}")
        
        # –¢–µ–∫—Å—Ç—É—Ä–∞
        if 'texture_complexity' in summary:
            texture = summary['texture_complexity']
            texture_map = {'smooth': '–≥–ª–∞–¥–∫–∞—è', 'medium': '—Å—Ä–µ–¥–Ω—è—è', 'complex': '—Å–ª–æ–∂–Ω–∞—è'}
            description_parts.append(f"üìê **–¢–µ–∫—Å—Ç—É—Ä–∞:** {texture_map.get(texture, texture)}")
        
        # –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        description_parts.append(f"üìä **–û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:** {summary.get('overall_confidence', 0):.1%}")
        
        return "\n".join(description_parts)