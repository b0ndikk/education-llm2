#!/usr/bin/env python3
"""
üéØ –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ –° –ò–ù–¢–ï–†–§–ï–ô–°–û–ú
"""

import gradio as gr
from ensemble_manager import FashionEnsemble
from PIL import Image

class FashionAIStylist:
    def __init__(self):
        self.ensemble = FashionEnsemble()
    
    def analyze_outfit(self, image):
        if image is None:
            return "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –ê–Ω–∞–ª–∏–∑ –∞–Ω—Å–∞–º–±–ª–µ–º
        analysis = self.ensemble.analyze_image(image)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        description = self.ensemble.get_detailed_description(analysis)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        detailed_analysis = "üîç **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n\n"
        
        if 'fashion_clip' in analysis:
            clip = analysis['fashion_clip']
            detailed_analysis += "**FashionCLIP:**\n"
            for category, data in clip.items():
                if category != 'error':
                    best = data['best_match']
                    detailed_analysis += f"  {category}: {best['item']} ({best['confidence']:.1%})\n"
        
        if 'yolo' in analysis:
            yolo = analysis['yolo']
            detailed_analysis += f"\n**YOLO:** {yolo.get('total_items', 0)} –æ–±—ä–µ–∫—Ç–æ–≤\n"
        
        if 'resnet' in analysis:
            resnet = analysis['resnet']
            detailed_analysis += f"\n**ResNet:** —Ç–µ–∫—Å—Ç—É—Ä–∞ {resnet.get('texture_complexity', 'unknown')}\n"
        
        return description, detailed_analysis

def create_interface():
    """–°–æ–∑–¥–∞–µ—Ç Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    stylist = FashionAIStylist()
    
    def analyze_image(image):
        return stylist.analyze_outfit(image)
    
    with gr.Blocks(title="üéØ AI –°—Ç–∏–ª–∏—Å—Ç - –ê–Ω—Å–∞–º–±–ª—å –ú–æ–¥–µ–ª–µ–π") as interface:
        gr.Markdown("# üéØ AI –°–¢–ò–õ–ò–°–¢ - –ê–ù–°–ê–ú–ë–õ–¨ –ú–û–î–ï–õ–ï–ô")
        gr.Markdown("**FashionCLIP + YOLO + ResNet** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–µ–∂–¥—ã")
        
        with gr.Row():
            with gr.Column():
                image_input = gr.Image(type="pil", label="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã")
                analyze_btn = gr.Button("üéØ –ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨", variant="primary")
            
            with gr.Column():
                description_output = gr.Textbox(label="üß¨ –û–ü–ò–°–ê–ù–ò–ï –û–î–ï–ñ–î–´", lines=8)
                analysis_output = gr.Textbox(label="üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó", lines=10)
        
        gr.Markdown("""
        ### üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ú–û–î–ï–õ–ò:
        - **FashionCLIP** - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∏ —Å—Ç–∏–ª—è –æ–¥–µ–∂–¥—ã
        - **YOLO** - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        - **ResNet** - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä –∏ —Ü–≤–µ—Ç–æ–≤
        """)
        
        analyze_btn.click(
            fn=analyze_image,
            inputs=[image_input],
            outputs=[description_output, analysis_output]
        )
    
    return interface

def main():
    print("üéØ AI –°–¢–ò–õ–ò–°–¢ - –ê–ù–°–ê–ú–ë–õ–¨ –ú–û–î–ï–õ–ï–ô")
    print("=" * 60)
    print("‚ú® –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ú–û–î–ï–õ–ò: FashionCLIP + YOLO + ResNet")
    print("=" * 60)
    
    interface = create_interface()
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True
    )

if __name__ == "__main__":
    main()