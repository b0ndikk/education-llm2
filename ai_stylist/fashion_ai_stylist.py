#!/usr/bin/env python3
"""
üéØ AI-–°–¢–ò–õ–ò–°–¢ –ù–ê –û–°–ù–û–í–ï FASHIONCLIP
"""

import os
import sys
import torch
import numpy as np
from PIL import Image
import json
from typing import Dict, List, Tuple, Optional
import gradio as gr
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from fashion_clip import FashionCLIP
    FASHION_CLIP_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è FashionCLIP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    os.system("pip install fashion-clip")
    try:
        from fashion_clip import FashionCLIP
        FASHION_CLIP_AVAILABLE = True
    except ImportError:
        FASHION_CLIP_AVAILABLE = False

class FashionAIStylist:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-—Å—Ç–∏–ª–∏—Å—Ç–∞"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-—Å—Ç–∏–ª–∏—Å—Ç–∞...")
        
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        print(f"üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º FashionCLIP
        if FASHION_CLIP_AVAILABLE:
            try:
                self.fclip = FashionCLIP('fashion-clip')
                print("‚úÖ FashionCLIP –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FashionCLIP: {e}")
                self.fclip = None
        else:
            print("‚ùå FashionCLIP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            self.fclip = None
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.categories = {
            'garment_type': [
                "t-shirt", "shirt", "blouse", "dress", "skirt", "pants", 
                "jeans", "shorts", "jacket", "coat", "blazer", "sweater", 
                "hoodie", "cardigan", "tank top", "polo shirt", "jumpsuit", 
                "romper", "vest", "windbreaker", "parka", "sneakers", "boots", 
                "heels", "sandals", "flats", "loafers", "oxfords"
            ],
            'color': [
                "black", "white", "gray", "beige", "brown", "navy", "blue", 
                "light blue", "sky blue", "red", "burgundy", "maroon", "pink", 
                "rose", "green", "forest green", "olive", "emerald", "yellow", 
                "gold", "mustard", "cream", "purple", "violet", "lavender", 
                "orange", "coral", "peach", "apricot"
            ],
            'style': [
                "casual", "formal", "business", "sporty", "athletic", "vintage", 
                "retro", "modern", "contemporary", "minimalist", "bohemian", 
                "street", "urban", "hip-hop", "preppy", "classic", "elegant", 
                "sophisticated", "romantic", "edgy", "punk", "gothic", "chic"
            ],
            'material': [
                "cotton", "denim", "leather", "silk", "wool", "cashmere", 
                "polyester", "linen", "suede", "canvas", "mesh", "knit", 
                "fleece", "satin", "velvet", "lace", "chiffon", "organza"
            ],
            'occasion': [
                "casual", "work", "office", "business", "formal", "evening", 
                "party", "cocktail", "wedding", "date", "gym", "sport", 
                "beach", "vacation", "travel", "weekend", "everyday"
            ],
            'brand_style': [
                "luxury", "designer", "high-end", "premium", "fast fashion", 
                "affordable", "budget", "mass market", "streetwear", "urban", 
                "hip-hop", "vintage", "retro", "classic", "traditional", 
                "sportswear", "athletic", "fitness"
            ]
        }
        
        # –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        self.style_rules = self._load_style_rules()
        
        print("‚úÖ AI-—Å—Ç–∏–ª–∏—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    def _load_style_rules(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∏"""
        return {
            'color_harmony': {
                'complementary': ['red-green', 'blue-orange', 'yellow-purple'],
                'analogous': ['red-orange-yellow', 'blue-green-teal', 'purple-pink-red'],
                'triadic': ['red-yellow-blue', 'orange-green-purple'],
                'monochromatic': ['black-gray-white', 'navy-blue-sky']
            },
            'style_matching': {
                'formal': ['business', 'elegant', 'sophisticated'],
                'casual': ['everyday', 'weekend', 'relaxed'],
                'sporty': ['athletic', 'gym', 'active'],
                'vintage': ['retro', 'classic', 'traditional']
            },
            'occasion_rules': {
                'work': ['formal', 'business', 'professional'],
                'party': ['evening', 'cocktail', 'dressy'],
                'gym': ['sporty', 'athletic', 'active'],
                'date': ['romantic', 'elegant', 'chic']
            }
        }
    
    def analyze_outfit(self, image: Image.Image) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑"""
        if not self.fclip:
            return {"error": "FashionCLIP –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"}
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            analysis = {}
            
            for category, options in self.categories.items():
                # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_embedding = self.fclip.encode_image(image)
                
                # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ç–µ–∫—Å—Ç–∞
                text_embeddings = self.fclip.encode_text(options)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
                similarities = torch.cosine_similarity(
                    image_embedding, text_embeddings, dim=1
                )
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                top_indices = torch.topk(similarities, 3).indices
                top_results = [
                    {
                        'item': options[i],
                        'confidence': similarities[i].item()
                    }
                    for i in top_indices
                ]
                
                analysis[category] = {
                    'best_match': top_results[0],
                    'alternatives': top_results[1:],
                    'all_scores': {options[i]: similarities[i].item() for i in top_indices}
                }
            
            return analysis
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}
    
    def get_styling_recommendations(self, analysis: Dict) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é"""
        if "error" in analysis:
            return [f"‚ùå {analysis['error']}"]
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç
        color = analysis['color']['best_match']['item']
        style = analysis['style']['best_match']['item']
        occasion = analysis['occasion']['best_match']['item']
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç—É
        if color in ['black', 'white', 'gray']:
            recommendations.append(f"‚úÖ {color.title()} - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–æ –≤—Å–µ–º—É")
        elif color in ['red', 'blue', 'green']:
            recommendations.append(f"üé® {color.title()} - —è—Ä–∫–∏–π —Ü–≤–µ—Ç, —Å–æ—á–µ—Ç–∞–π—Ç–µ —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º–∏ —Ç–æ–Ω–∞–º–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
        if style == 'casual':
            recommendations.append("üëï –ö—ç–∂—É–∞–ª —Å—Ç–∏–ª—å - –¥–æ–±–∞–≤—å—Ç–µ –¥–∂–∏–Ω—Å—ã –∏–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏")
        elif style == 'formal':
            recommendations.append("üëî –§–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –≤–∞–∂–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á")
        elif style == 'sporty':
            recommendations.append("üèÉ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å - –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≤–æ–¥—É
        if occasion == 'work':
            recommendations.append("üíº –î–ª—è —Ä–∞–±–æ—Ç—ã - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ —Å–∏–ª—É—ç—Ç—ã")
        elif occasion == 'party':
            recommendations.append("üéâ –î–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏ - –¥–æ–±–∞–≤—å—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —è—Ä–∫–∏–µ –¥–µ—Ç–∞–ª–∏")
        
        return recommendations
    
    def find_similar_items(self, analysis: Dict, category: str = 'garment_type') -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
        if "error" in analysis or category not in analysis:
            return []
        
        alternatives = analysis[category]['alternatives']
        return [item['item'] for item in alternatives]
    
    def create_outfit_combination(self, base_item: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –æ–±—Ä–∞–∑–∞"""
        combinations = {
            't-shirt': ['jeans', 'shorts', 'skirt', 'blazer'],
            'dress': ['jacket', 'cardigan', 'heels', 'flats'],
            'jeans': ['t-shirt', 'shirt', 'sweater', 'sneakers'],
            'blazer': ['shirt', 'blouse', 'pants', 'heels'],
            'sneakers': ['jeans', 'shorts', 't-shirt', 'hoodie']
        }
        
        return {
            'base_item': base_item,
            'suggested_combinations': combinations.get(base_item, []),
            'style_tips': self._get_style_tips(base_item)
        }
    
    def _get_style_tips(self, item: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        tips = {
            't-shirt': [
                "–ó–∞–ø—Ä–∞–≤—å—Ç–µ –≤ –¥–∂–∏–Ω—Å—ã –¥–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞",
                "–î–æ–±–∞–≤—å—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–∑–∞"
            ],
            'dress': [
                "–ü–æ–¥–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–±—É–≤—å –ø–æ —Å–ª—É—á–∞—é",
                "–î–æ–±–∞–≤—å—Ç–µ –ø–æ—è—Å –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è —Ç–∞–ª–∏–∏"
            ],
            'jeans': [
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–∞–¥–∫—É –¥–ª—è –≤–∞—à–µ–π —Ñ–∏–≥—É—Ä—ã",
                "–°–æ—á–µ—Ç–∞–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–ø–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"
            ]
        }
        
        return tips.get(item, ["–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏"])

def create_gradio_interface():
    """–°–æ–∑–¥–∞–µ—Ç Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏—Å—Ç–∞
    stylist = FashionAIStylist()
    
    def analyze_and_recommend(image):
        if image is None:
            return "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã", []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–∑
        analysis = stylist.analyze_outfit(image)
        
        if "error" in analysis:
            return f"‚ùå {analysis['error']}", []
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_text = "üéØ **–ê–ù–ê–õ–ò–ó –û–ë–†–ê–ó–ê**\n\n"
        
        for category, data in analysis.items():
            best = data['best_match']
            result_text += f"**{category.replace('_', ' ').title()}:** {best['item']} ({best['confidence']:.1%})\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = stylist.get_styling_recommendations(analysis)
        
        return result_text, recommendations
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    with gr.Blocks(title="AI-–°—Ç–∏–ª–∏—Å—Ç") as interface:
        gr.Markdown("# üéØ AI-–°—Ç–∏–ª–∏—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ FashionCLIP")
        gr.Markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        with gr.Row():
            with gr.Column():
                image_input = gr.Image(type="pil", label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã")
                analyze_btn = gr.Button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑", variant="primary")
            
            with gr.Column():
                analysis_output = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞", lines=10)
                recommendations_output = gr.Textbox(label="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", lines=5)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫
        analyze_btn.click(
            fn=analyze_and_recommend,
            inputs=[image_input],
            outputs=[analysis_output, recommendations_output]
        )
        
        # –ü—Ä–∏–º–µ—Ä—ã
        gr.Examples(
            examples=[
                ["data/fashion_mnist/train/0/00000.png"],
                ["data/fashion_mnist/train/1/00000.png"],
                ["data/fashion_mnist/train/2/00000.png"]
            ],
            inputs=[image_input]
        )
    
    return interface

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ AI-–°–¢–ò–õ–ò–°–¢ –ù–ê –û–°–ù–û–í–ï FASHIONCLIP")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    interface = create_gradio_interface()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True
    )

if __name__ == "__main__":
    main()
