#!/usr/bin/env python3
"""
üéØ –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ –° –ò–ù–¢–ï–†–§–ï–ô–°–û–ú - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import gradio as gr
from ensemble_manager import FashionEnsemble
from vit_outfit_builder import ViTOutfitManager
from PIL import Image
import json

class FashionAIStylist:
    def __init__(self):
        self.ensemble = FashionEnsemble()
        self.vit_manager = ViTOutfitManager()
    
    def analyze_outfit(self, image):
        if image is None:
            return "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –ê–Ω–∞–ª–∏–∑ –∞–Ω—Å–∞–º–±–ª–µ–º
        analysis = self.ensemble.analyze_image(image)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        description = self.ensemble.get_detailed_description(analysis)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        detailed_analysis = "üîç **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n\n"
        
        if 'fashion_clip' in analysis:
            clip = analysis['fashion_clip']
            detailed_analysis += "**FashionCLIP:**\n"
            for category, data in clip.items():
                if category != 'error':
                    best = data['best_match']
                    detailed_analysis += f"  {category}: {best['item']} ({best['confidence']:.1%})\n"
        
        if 'yolo' in analysis:
            yolo = analysis['yolo']
            detailed_analysis += f"\n**YOLO:** {yolo.get('total_items', 0)} –æ–±—ä–µ–∫—Ç–æ–≤\n"
        
        if 'resnet' in analysis:
            resnet = analysis['resnet']
            detailed_analysis += f"\n**ResNet:** —Ç–µ–∫—Å—Ç—É—Ä–∞ {resnet.get('texture_complexity', 'unknown')}\n"
        
        return description, detailed_analysis
    
    def add_to_wardrobe(self, image):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –≥–∞—Ä–¥–µ—Ä–æ–±"""
        if image is None:
            return "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
        analysis = self.ensemble.analyze_image(image)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–∞—Ä–¥–µ—Ä–æ–±
        item_id = self.vit_manager.add_item_from_analysis(image, analysis)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞—Ä–¥–µ—Ä–æ–±–µ
        wardrobe_info = self.vit_manager.get_wardrobe_info()
        
        return f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∞—Ä–¥–µ—Ä–æ–±! ID: {item_id}", f"üìä –ì–∞—Ä–¥–µ—Ä–æ–±: {wardrobe_info['total_items']} –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
    
    def add_multiple_to_wardrobe(self, files):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –≥–∞—Ä–¥–µ—Ä–æ–± –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        if not files:
            return "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        added_count = 0
        errors = []
        
        for i, file in enumerate(files):
            if file is None:
                continue
                
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(file.name)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
                analysis = self.ensemble.analyze_image(image)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–∞—Ä–¥–µ—Ä–æ–±
                item_id = self.vit_manager.add_item_from_analysis(image, analysis)
                added_count += 1
                
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–º {i+1}: {str(e)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞—Ä–¥–µ—Ä–æ–±–µ
        wardrobe_info = self.vit_manager.get_wardrobe_info()
        
        result_text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –≥–∞—Ä–¥–µ—Ä–æ–±!\n"
        if errors:
            result_text += f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏:\n" + "\n".join(errors)
        
        return result_text, f"üìä –ì–∞—Ä–¥–µ—Ä–æ–±: {wardrobe_info['total_items']} –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
    
    def generate_outfit(self, occasion):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è"""
        if not occasion:
            return "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–∑
        outfit_result = self.vit_manager.generate_outfit_for_occasion(occasion)
        
        if "error" in outfit_result:
            return f"‚ùå {outfit_result['error']}", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        outfit_text = f"üéØ **–û–ë–†–ê–ó –î–õ–Ø –°–õ–£–ß–ê–Ø: {occasion.upper()}**\n\n"
        outfit_text += f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {outfit_result['confidence']:.1%}\n"
        outfit_text += f"üëï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {outfit_result['total_items']}\n\n"
        
        if outfit_result['outfit']:
            outfit_text += "**–í–´–ë–†–ê–ù–ù–´–ï –ü–†–ï–î–ú–ï–¢–´:**\n"
            for i, item in enumerate(outfit_result['outfit'], 1):
                features = item['features']
                item_desc = []
                if features.get('garment_type'):
                    item_desc.append(features['garment_type'])
                if features.get('color'):
                    item_desc.append(features['color'])
                if features.get('style'):
                    item_desc.append(features['style'])
                
                outfit_text += f"{i}. {' '.join(item_desc)} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {item['score']:.1%})\n"
        
        outfit_text += f"\n**–û–ë–™–Ø–°–ù–ï–ù–ò–ï:**\n{outfit_result['explanation']}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞—Ä–¥–µ—Ä–æ–±–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        wardrobe_info = self.vit_manager.get_wardrobe_info()
        
        return outfit_text, f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞: {wardrobe_info['total_items']} –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
    
    def get_wardrobe_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞—Ä–¥–µ—Ä–æ–±–µ"""
        wardrobe_info = self.vit_manager.get_wardrobe_info()
        
        info_text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–ê–†–î–ï–†–û–ë–ê**\n\n"
        info_text += f"üëï –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {wardrobe_info['total_items']}\n"
        
        if wardrobe_info['item_types']:
            info_text += f"üè∑Ô∏è –¢–∏–ø—ã –æ–¥–µ–∂–¥—ã: {', '.join(wardrobe_info['item_types'])}\n"
        
        if wardrobe_info['colors']:
            info_text += f"üé® –¶–≤–µ—Ç–∞: {', '.join(wardrobe_info['colors'])}\n"
        
        if wardrobe_info['styles']:
            info_text += f"‚ú® –°—Ç–∏–ª–∏: {', '.join(wardrobe_info['styles'])}\n"
        
        return info_text, "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∞—Ä–¥–µ—Ä–æ–±–µ"


def create_interface():
    """–°–æ–∑–¥–∞–µ—Ç Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    stylist = FashionAIStylist()
    
    def analyze_image(image):
        return stylist.analyze_outfit(image)
    
    def add_to_wardrobe(image):
        return stylist.add_to_wardrobe(image)
    
    def add_multiple_to_wardrobe(files):
        return stylist.add_multiple_to_wardrobe(files)
    
    def generate_outfit(occasion):
        return stylist.generate_outfit(occasion)
    
    def get_wardrobe_info():
        return stylist.get_wardrobe_info()
    
    with gr.Blocks(title="üéØ AI –°—Ç–∏–ª–∏—Å—Ç - –ê–Ω—Å–∞–º–±–ª—å –ú–æ–¥–µ–ª–µ–π + ViT") as interface:
        gr.Markdown("# üéØ AI –°–¢–ò–õ–ò–°–¢ - –ê–ù–°–ê–ú–ë–õ–¨ –ú–û–î–ï–õ–ï–ô + ViT")
        gr.Markdown("**FashionCLIP + YOLO + ResNet + Vision Transformer** - –∞–Ω–∞–ª–∏–∑ –∏ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        with gr.Tabs():
            # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            with gr.Tab("üîç –ê–Ω–∞–ª–∏–∑ –æ–¥–µ–∂–¥—ã"):
                with gr.Row():
                    with gr.Column():
                        image_input = gr.Image(type="pil", label="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã")
                        analyze_btn = gr.Button("üéØ –ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨", variant="primary")
                    
                    with gr.Column():
                        description_output = gr.Textbox(label="üß¨ –û–ü–ò–°–ê–ù–ò–ï –û–î–ï–ñ–î–´", lines=8)
                        analysis_output = gr.Textbox(label="üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó", lines=10)
                
                analyze_btn.click(
                    fn=analyze_image,
                    inputs=[image_input],
                    outputs=[description_output, analysis_output]
                )
            
            # –í–∫–ª–∞–¥–∫–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞
            with gr.Tab("üëï –ì–∞—Ä–¥–µ—Ä–æ–±"):
                with gr.Row():
                    with gr.Column():
                        wardrobe_image_input = gr.Image(type="pil", label="üì∑ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≥–∞—Ä–¥–µ—Ä–æ–±")
                        add_to_wardrobe_btn = gr.Button("‚ûï –î–û–ë–ê–í–ò–¢–¨ –í –ì–ê–†–î–ï–†–û–ë", variant="primary")
                        wardrobe_status = gr.Textbox(label="üìä –°—Ç–∞—Ç—É—Å", lines=2)
                    
                    with gr.Column():
                        wardrobe_info_btn = gr.Button("üìä –ü–û–ö–ê–ó–ê–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£", variant="secondary")
                        wardrobe_info_output = gr.Textbox(label="üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∞—Ä–¥–µ—Ä–æ–±–µ", lines=8)
                
                add_to_wardrobe_btn.click(
                    fn=add_to_wardrobe,
                    inputs=[wardrobe_image_input],
                    outputs=[wardrobe_status, wardrobe_info_output]
                )
                
                wardrobe_info_btn.click(
                    fn=get_wardrobe_info,
                    outputs=[wardrobe_info_output, gr.Textbox()]
                )
                
                # –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                gr.Markdown("---")
                gr.Markdown("### üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞")
                
                with gr.Row():
                    with gr.Column():
                        multiple_images_input = gr.File(
                            file_count="multiple",
                            file_types=["image"],
                            label="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–µ–∂–¥—ã",
                            height=200
                        )
                        add_multiple_btn = gr.Button("üì¶ –î–û–ë–ê–í–ò–¢–¨ –í–°–ï –í –ì–ê–†–î–ï–†–û–ë", variant="primary", size="lg")
                        multiple_status = gr.Textbox(label="üìä –°—Ç–∞—Ç—É—Å –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", lines=3)
                    
                    with gr.Column():
                        gr.Markdown("""
                        **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ:**
                        1. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–µ–∂–¥—ã
                        2. –ù–∞–∂–º–∏—Ç–µ "–î–û–ë–ê–í–ò–¢–¨ –í–°–ï –í –ì–ê–†–î–ï–†–û–ë"
                        3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞—Ä–¥–µ—Ä–æ–±–∞
                        
                        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** JPG, PNG, WEBP
                        **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** 10 MB –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        """)
                
                add_multiple_btn.click(
                    fn=add_multiple_to_wardrobe,
                    inputs=[multiple_images_input],
                    outputs=[multiple_status, wardrobe_info_output]
                )
            
            # –í–∫–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–æ–≤
            with gr.Tab("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤"):
                with gr.Row():
                    with gr.Column():
                        occasion_dropdown = gr.Dropdown(
                            choices=["—Å–≤–∏–¥–∞–Ω–∏–µ", "—Å–ø–æ—Ä—Ç", "–ø—Ä–æ–≥—É–ª–∫–∞", "—Ä–∞–±–æ—Ç–∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–≤–µ—á–µ—Ä–∏–Ω–∫–∞", "–æ—Ç–ø—É—Å–∫", "—à–æ–ø–∏–Ω–≥"],
                            label="üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π",
                            value="–ø—Ä–æ–≥—É–ª–∫–∞"
                        )
                        generate_outfit_btn = gr.Button("‚ú® –°–û–ë–†–ê–¢–¨ –û–ë–†–ê–ó", variant="primary")
                    
                    with gr.Column():
                        outfit_output = gr.Textbox(label="üëó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑", lines=12)
                        outfit_stats = gr.Textbox(label="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", lines=3)
                
                generate_outfit_btn.click(
                    fn=generate_outfit,
                    inputs=[occasion_dropdown],
                    outputs=[outfit_output, outfit_stats]
                )
        
        gr.Markdown("""
        ### üöÄ –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ú–û–î–ï–õ–ò:
        - **FashionCLIP** - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∏ —Å—Ç–∏–ª—è –æ–¥–µ–∂–¥—ã
        - **YOLO** - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        - **ResNet** - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä –∏ —Ü–≤–µ—Ç–æ–≤
        - **Vision Transformer (ViT)** - –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
        
        ### üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø:
        1. **–ê–Ω–∞–ª–∏–∑**: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        2. **–ì–∞—Ä–¥–µ—Ä–æ–±**: –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Å–≤–æ–π –≥–∞—Ä–¥–µ—Ä–æ–± (–ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –º–∞—Å—Å–æ–≤–æ)
        3. **–û–±—Ä–∞–∑—ã**: –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑
        """)
    
    return interface


def main():
    print("üéØ AI –°–¢–ò–õ–ò–°–¢ - –ê–ù–°–ê–ú–ë–õ–¨ –ú–û–î–ï–õ–ï–ô + ViT")
    print("=" * 60)
    print("‚ú® –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ú–û–î–ï–õ–ò: FashionCLIP + YOLO + ResNet + Vision Transformer")
    print("=" * 60)
    
    interface = create_interface()
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True
    )


if __name__ == "__main__":
    main()
