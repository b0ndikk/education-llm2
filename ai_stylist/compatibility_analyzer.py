#!/usr/bin/env python3
"""
üîç –ê–ù–ê–õ–ò–ó –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –≠–õ–ï–ú–ï–ù–¢–û–í –û–î–ï–ñ–î–´
"""

import numpy as np
from typing import Dict, List, Tuple

class CompatibilityAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–µ–∂–¥—ã"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
        
        # –¶–≤–µ—Ç–æ–≤—ã–µ –≥–∞—Ä–º–æ–Ω–∏–∏
        self.color_harmonies = {
            'monochromatic': ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Å–µ—Ä—ã–π'],
            'complementary': [('–∫—Ä–∞—Å–Ω—ã–π', '–∑–µ–ª–µ–Ω—ã–π'), ('—Å–∏–Ω–∏–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π'), ('–∂–µ–ª—Ç—ã–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π')],
            'analogous': [('–∫—Ä–∞—Å–Ω—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π'), ('—Å–∏–Ω–∏–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π'), ('–∑–µ–ª–µ–Ω—ã–π', '–∂–µ–ª—Ç—ã–π')],
            'triadic': [('–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∂–µ–ª—Ç—ã–π'), ('–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π')]
        }
        
        # –°—Ç–∏–ª–µ–≤—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.style_compatibilities = {
            'casual': ['–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π', '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π'],
            'formal': ['–¥–µ–ª–æ–≤–æ–π', '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π', '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π'],
            'sport': ['—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', '–∞–∫—Ç–∏–≤–Ω—ã–π', '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π'],
            'romantic': ['—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π', '–∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π', '–Ω–µ–∂–Ω—ã–π']
        }
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.season_compatibilities = {
            '–∑–∏–º–∞': ['–∑–∏–º–Ω–∏–π', '—Ç–µ–ø–ª—ã–π', '—É—é—Ç–Ω—ã–π'],
            '–ª–µ—Ç–æ': ['–ª–µ—Ç–Ω–∏–π', '–ª–µ–≥–∫–∏–π', '—Å–≤–µ–∂–∏–π'],
            '–≤–µ—Å–Ω–∞': ['–≤–µ—Å–µ–Ω–Ω–∏–π', '—è—Ä–∫–∏–π', '–æ–±–Ω–æ–≤–ª—è—é—â–∏–π—Å—è'],
            '–æ—Å–µ–Ω—å': ['–æ—Å–µ–Ω–Ω–∏–π', '—Ç–µ–ø–ª—ã–π', '—É—é—Ç–Ω—ã–π']
        }
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤!")
    
    def check_color_compatibility(self, color1: str, color2: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤"""
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–≤–µ—Ç–∞
            color1 = color1.lower().strip()
            color2 = color2.lower().strip()
            
            # –ï—Å–ª–∏ —Ü–≤–µ—Ç–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –≤—ã—Å–æ–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            if color1 == color2:
                return 0.9
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—É—é –≥–∞—Ä–º–æ–Ω–∏—é
            if self._check_monochromatic(color1, color2):
                return 0.8
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
            if self._check_complementary(color1, color2):
                return 0.7
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞
            if self._check_analogous(color1, color2):
                return 0.6
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–∞–¥–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
            if self._check_triadic(color1, color2):
                return 0.5
            
            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º
            if color1 in ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Å–µ—Ä—ã–π', '–±–µ–∂–µ–≤—ã–π'] or color2 in ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Å–µ—Ä—ã–π', '–±–µ–∂–µ–≤—ã–π']:
                return 0.4
            
            # –ë–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            return 0.3
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤: {e}")
            return 0.5
    
    def _check_monochromatic(self, color1: str, color2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–π –≥–∞—Ä–º–æ–Ω–∏–∏"""
        return color1 in self.color_harmonies['monochromatic'] and color2 in self.color_harmonies['monochromatic']
    
    def _check_complementary(self, color1: str, color2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤"""
        for pair in self.color_harmonies['complementary']:
            if (color1 in pair and color2 in pair):
                return True
        return False
    
    def _check_analogous(self, color1: str, color2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤"""
        for pair in self.color_harmonies['analogous']:
            if (color1 in pair and color2 in pair):
                return True
        return False
    
    def _check_triadic(self, color1: str, color2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–∞–¥–∏—á–µ—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤"""
        for triad in self.color_harmonies['triadic']:
            if (color1 in triad and color2 in triad):
                return True
        return False
    
    def check_style_compatibility(self, style1: str, style2: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–∏–ª–µ–π"""
        try:
            style1 = style1.lower().strip()
            style2 = style2.lower().strip()
            
            # –ï—Å–ª–∏ —Å—Ç–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –≤—ã—Å–æ–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            if style1 == style2:
                return 0.9
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∏–ª–∏
            for main_style, compatible_styles in self.style_compatibilities.items():
                if style1 == main_style and style2 in compatible_styles:
                    return 0.8
                if style2 == main_style and style1 in compatible_styles:
                    return 0.8
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            for main_style, compatible_styles in self.style_compatibilities.items():
                if style1 in compatible_styles and style2 in compatible_styles:
                    return 0.7
            
            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º
            if style1 in ['–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'] or style2 in ['–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π']:
                return 0.6
            
            # –ë–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            return 0.4
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª–µ–π: {e}")
            return 0.5
    
    def check_season_compatibility(self, season1: str, season2: str) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–µ–∑–æ–Ω–æ–≤"""
        try:
            season1 = season1.lower().strip()
            season2 = season2.lower().strip()
            
            # –ï—Å–ª–∏ —Å–µ–∑–æ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –≤—ã—Å–æ–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            if season1 == season2:
                return 0.9
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å–µ–∑–æ–Ω—ã
            for main_season, compatible_seasons in self.season_compatibilities.items():
                if season1 == main_season and season2 in compatible_seasons:
                    return 0.8
                if season2 == main_season and season1 in compatible_seasons:
                    return 0.8
            
            # –°–º–µ–∂–Ω—ã–µ —Å–µ–∑–æ–Ω—ã –∏–º–µ—é—Ç —Å—Ä–µ–¥–Ω—é—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            adjacent_seasons = {
                '–∑–∏–º–∞': ['–æ—Å–µ–Ω—å', '–≤–µ—Å–Ω–∞'],
                '–≤–µ—Å–Ω–∞': ['–∑–∏–º–∞', '–ª–µ—Ç–æ'],
                '–ª–µ—Ç–æ': ['–≤–µ—Å–Ω–∞', '–æ—Å–µ–Ω—å'],
                '–æ—Å–µ–Ω—å': ['–ª–µ—Ç–æ', '–∑–∏–º–∞']
            }
            
            if season1 in adjacent_seasons.get(season2, []) or season2 in adjacent_seasons.get(season1, []):
                return 0.6
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–∑–æ–Ω—ã
            if season1 in ['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', '–≤—Å–µ—Å–µ–∑–æ–Ω–Ω—ã–π'] or season2 in ['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', '–≤—Å–µ—Å–µ–∑–æ–Ω–Ω—ã–π']:
                return 0.7
            
            # –ë–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            return 0.3
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–æ–≤: {e}")
            return 0.5
    
    def analyze_outfit_compatibility(self, items: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—Å–µ–≥–æ –æ–±—Ä–∞–∑–∞"""
        try:
            if len(items) < 2:
                return {'compatibility_score': 1.0, 'analysis': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
            
            compatibility_scores = []
            analysis_details = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for i in range(len(items)):
                for j in range(i + 1, len(items)):
                    item1 = items[i]
                    item2 = items[j]
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    color_score = self.check_color_compatibility(
                        item1.get('color', 'unknown'),
                        item2.get('color', 'unknown')
                    )
                    
                    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª–µ–≤–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    style_score = self.check_style_compatibility(
                        item1.get('style', 'unknown'),
                        item2.get('style', 'unknown')
                    )
                    
                    # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    season_score = self.check_season_compatibility(
                        item1.get('season', 'unknown'),
                        item2.get('season', 'unknown')
                    )
                    
                    # –û–±—â–∏–π —Å–∫–æ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–∞—Ä—ã
                    pair_score = (color_score * 0.4 + style_score * 0.4 + season_score * 0.2)
                    compatibility_scores.append(pair_score)
                    
                    analysis_details.append({
                        'items': [item1.get('garment_type', 'unknown'), item2.get('garment_type', 'unknown')],
                        'color_score': color_score,
                        'style_score': style_score,
                        'season_score': season_score,
                        'overall_score': pair_score
                    })
            
            # –û–±—â–∏–π —Å–∫–æ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞
            overall_score = np.mean(compatibility_scores) if compatibility_scores else 0.5
            
            return {
                'compatibility_score': overall_score,
                'analysis': analysis_details,
                'recommendations': self._generate_compatibility_recommendations(overall_score, analysis_details)
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            return {'compatibility_score': 0.5, 'analysis': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'}
    
    def _generate_compatibility_recommendations(self, score: float, analysis: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        recommendations = []
        
        if score < 0.3:
            recommendations.append("‚ùå –ù–∏–∑–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            recommendations.append("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞ –∏–ª–∏ —Å—Ç–∏–ª–∏")
        elif score < 0.6:
            recommendations.append("‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            recommendations.append("üí° –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞")
        elif score < 0.8:
            recommendations.append("‚úÖ –•–æ—Ä–æ—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            recommendations.append("üí° –û–±—Ä–∞–∑ –≤—ã–≥–ª—è–¥–∏—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ")
        else:
            recommendations.append("üéØ –û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            recommendations.append("üí° –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑!")
        
        return recommendations
