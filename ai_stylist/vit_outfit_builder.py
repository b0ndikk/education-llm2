#!/usr/bin/env python3
"""
üéØ VIT OUTFIT BUILDER - –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ —Å –ø–æ–º–æ—â—å—é Vision Transformer
"""

import os
import sys
import math
import uuid
import json
from typing import List, Dict, Tuple, Optional
from PIL import Image
import numpy as np

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import torch
    import torch.nn as nn
    import timm
    TORCH_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è PyTorch/Timm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install torch timm")
    TORCH_AVAILABLE = False

try:
    import torchvision.transforms as transforms
    TORCHVISION_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Torchvision –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install torchvision")
    TORCHVISION_AVAILABLE = False

class FashionViT:
    """Vision Transformer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–¥–µ–∂–¥—ã"""
    
    def __init__(self, num_items: int = 10, embedding_dim: int = 768):
        if not TORCH_AVAILABLE:
            raise ImportError("PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install torch timm")
        
        # –ë–∞–∑–æ–≤—ã–π ViT
        self.vit = timm.create_model('vit_base_patch16_224', pretrained=True)
        self.vit.head = nn.Linear(self.vit.head.in_features, embedding_dim)
        
        # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–∏
        for param in self.vit.parameters():
            param.requires_grad = False
        
        # –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ–≤—É
        for param in self.vit.head.parameters():
            param.requires_grad = True
        
        # Transformer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.compatibility_transformer = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(
                d_model=embedding_dim,
                nhead=12,
                dim_feedforward=2048,
                dropout=0.1
            ),
            num_layers=6
        )
        
        # –í—ã—Ö–æ–¥–Ω—ã–µ –≥–æ–ª–æ–≤—ã
        self.compatibility_head = nn.Linear(embedding_dim, 1)
        self.outfit_head = nn.Linear(embedding_dim, num_items)
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.pos_encoding = self._create_positional_encoding(embedding_dim)
        
    def _create_positional_encoding(self, d_model: int, max_len: int = 100):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len).unsqueeze(1).float()
        
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * 
                           -(torch.log(torch.tensor(10000.0)) / d_model))
        
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        
        return nn.Parameter(pe.unsqueeze(0), requires_grad=False)
    
    def forward(self, item_images: List[Image.Image], occasion: str = "casual") -> Tuple[torch.Tensor, torch.Tensor]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–¥–µ–∂–¥—ã"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        item_embeddings = []
        for image in item_images:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PIL –≤ —Ç–µ–Ω–∑–æ—Ä
            image_tensor = self._preprocess_image(image)
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –æ—Ç ViT
            with torch.no_grad():
                embedding = self.vit(image_tensor)  # [embedding_dim]
            
            item_embeddings.append(embedding)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        sequence = torch.stack(item_embeddings)  # [num_items, embedding_dim]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        seq_len = sequence.size(0)
        sequence = sequence + self.pos_encoding[:, :seq_len, :]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ Transformer
        transformer_output = self.compatibility_transformer(sequence)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        compatibility_scores = self.compatibility_head(transformer_output)
        outfit_scores = self.outfit_head(transformer_output)
        
        return compatibility_scores, outfit_scores
    
    def _preprocess_image(self, image: Image.Image) -> torch.Tensor:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ViT"""
        if not TORCHVISION_AVAILABLE:
            print("‚ùå torchvision –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install torchvision")
            return torch.zeros(1, 3, 224, 224)
        
        transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                               std=[0.229, 0.224, 0.225])
        ])
        
        return transform(image).unsqueeze(0)  # –î–æ–±–∞–≤–ª—è–µ–º batch dimension


class OccasionRules:
    """–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    def __init__(self):
        self.rules = {
            "—Å–≤–∏–¥–∞–Ω–∏–µ": {
                "colors": ["—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "–∫—Ä–∞—Å–Ω—ã–π", "—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π", "–±–æ—Ä–¥–æ–≤—ã–π", "—Ä–æ–∑–æ–≤—ã–π", "–∑–æ–ª–æ—Ç–æ–π", "—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π"],
                "styles": ["—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π", "—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π", "—É—Ç–æ–Ω—á–µ–Ω–Ω—ã–π"],
                "garments": ["–ø–ª–∞—Ç—å–µ", "–±–ª—É–∑–∫–∞", "—é–±–∫–∞", "–±—Ä—é–∫–∏", "—Ç—É—Ñ–ª–∏", "—Å—É–º–∫–∞", "—É–∫—Ä–∞—à–µ–Ω–∏—è"],
                "avoid": ["—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π", "—è—Ä–∫–∏–π", "–∫—Ä–∏—á–∞—â–∏–π", "–º–µ—à–∫–æ–≤–∞—Ç—ã–π"],
                "season": ["–≤–µ—Å–Ω–∞", "–ª–µ—Ç–æ", "–æ—Å–µ–Ω—å", "–∑–∏–º–∞"],
                "temperature": ["–∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è", "–ø—Ä–æ—Ö–ª–∞–¥–Ω–∞—è"],
                "price_range": ["—Å—Ä–µ–¥–Ω—è—è", "–ø—Ä–µ–º–∏—É–º", "–ª—é–∫—Å"],
                "weight": 1.0
            },
            "—Å–ø–æ—Ä—Ç": {
                "colors": ["–ª—é–±—ã–µ", "—è—Ä–∫–∏–µ", "–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ"],
                "styles": ["—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", "–∞–∫—Ç–∏–≤–Ω—ã–π", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π"],
                "garments": ["—Ñ—É—Ç–±–æ–ª–∫–∞", "—à–æ—Ä—Ç—ã", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —à—Ç–∞–Ω—ã", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Å—É–º–∫–∞"],
                "avoid": ["—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", "—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π", "–¥–µ–ª–æ–≤–æ–π"],
                "season": ["–ª—é–±–æ–π"],
                "temperature": ["–ª—é–±–∞—è"],
                "price_range": ["–±—é–¥–∂–µ—Ç–Ω–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "–ø—Ä–µ–º–∏—É–º"],
                "weight": 1.0
            },
            "–ø—Ä–æ–≥—É–ª–∫–∞": {
                "colors": ["–ª—é–±—ã–µ", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ", "–ø—Ä–∏—Ä–æ–¥–Ω—ã–µ"],
                "styles": ["–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π", "–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π", "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π", "casual"],
                "garments": ["—Ñ—É—Ç–±–æ–ª–∫–∞", "–¥–∂–∏–Ω—Å—ã", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–∫—É—Ä—Ç–∫–∞", "—Ä—é–∫–∑–∞–∫"],
                "avoid": ["—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", "—Å–ª–∏—à–∫–æ–º –Ω–∞—Ä—è–¥–Ω—ã–π"],
                "season": ["–ª—é–±–æ–π"],
                "temperature": ["–ª—é–±–∞—è"],
                "price_range": ["–±—é–¥–∂–µ—Ç–Ω–∞—è", "—Å—Ä–µ–¥–Ω—è—è"],
                "weight": 0.8
            },
            "—Ä–∞–±–æ—Ç–∞": {
                "colors": ["—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—Å–µ—Ä—ã–π", "—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π", "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "–±–µ–∂–µ–≤—ã–π"],
                "styles": ["–¥–µ–ª–æ–≤–æ–π", "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "—Å—Ç—Ä–æ–≥–∏–π"],
                "garments": ["–±–ª—É–∑–∫–∞", "–±—Ä—é–∫–∏", "—é–±–∫–∞", "—Ç—É—Ñ–ª–∏", "–ø–∏–¥–∂–∞–∫", "—Ä—É–±–∞—à–∫–∞"],
                "avoid": ["—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", "—è—Ä–∫–∏–π", "–∫—Ä–∏—á–∞—â–∏–π", "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π"],
                "season": ["–ª—é–±–æ–π"],
                "temperature": ["–∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è"],
                "price_range": ["—Å—Ä–µ–¥–Ω—è—è", "–ø—Ä–µ–º–∏—É–º"],
                "weight": 1.0
            },
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": {
                "colors": ["–ª—é–±—ã–µ", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ", "—Ç–µ–º–Ω—ã–µ"],
                "styles": ["–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π", "–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"],
                "garments": ["—Ñ—É—Ç–±–æ–ª–∫–∞", "–¥–∂–∏–Ω—Å—ã", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–∫—É—Ä—Ç–∫–∞", "—Ä—é–∫–∑–∞–∫", "—Å—É–º–∫–∞"],
                "avoid": ["—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", "—Ö—Ä—É–ø–∫–∏–π", "–Ω–µ—É–¥–æ–±–Ω—ã–π"],
                "season": ["–ª—é–±–æ–π"],
                "temperature": ["–ª—é–±–∞—è"],
                "price_range": ["–±—é–¥–∂–µ—Ç–Ω–∞—è", "—Å—Ä–µ–¥–Ω—è—è"],
                "weight": 0.9
            },
            "–≤–µ—á–µ—Ä–∏–Ω–∫–∞": {
                "colors": ["—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—è—Ä–∫–∏–µ", "–º–µ—Ç–∞–ª–ª–∏–∫", "–±–ª–µ—Å—Ç—è—â–∏–µ"],
                "styles": ["–≤–µ—á–µ—Ä–Ω–∏–π", "—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π", "–≥–ª–∞–º—É—Ä–Ω—ã–π", "—Å—Ç–∏–ª—å–Ω—ã–π"],
                "garments": ["–ø–ª–∞—Ç—å–µ", "—Ç—É—Ñ–ª–∏", "—Å—É–º–∫–∞", "—É–∫—Ä–∞—à–µ–Ω–∏—è", "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"],
                "avoid": ["–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", "—Å–∫—Ä–æ–º–Ω—ã–π"],
                "season": ["–ª—é–±–æ–π"],
                "temperature": ["–∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è"],
                "price_range": ["—Å—Ä–µ–¥–Ω—è—è", "–ø—Ä–µ–º–∏—É–º", "–ª—é–∫—Å"],
                "weight": 1.0
            },
            "–æ—Ç–ø—É—Å–∫": {
                "colors": ["—è—Ä–∫–∏–µ", "—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ", "—Å–≤–µ—Ç–ª—ã–µ", "–ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ"],
                "styles": ["—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π", "–∫—É—Ä–æ—Ä—Ç–Ω—ã–π", "—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π", "–ø–ª—è–∂–Ω—ã–π"],
                "garments": ["–∫—É–ø–∞–ª—å–Ω–∏–∫", "—à–æ—Ä—Ç—ã", "—Ñ—É—Ç–±–æ–ª–∫–∞", "—Å–∞–Ω–¥–∞–ª–∏", "—Å—É–º–∫–∞"],
                "avoid": ["—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", "–∑–∏–º–Ω–∏–π", "—Ç–µ–º–Ω—ã–π"],
                "season": ["–ª–µ—Ç–æ", "–≤–µ—Å–Ω–∞"],
                "temperature": ["–∂–∞—Ä–∫–∞—è", "—Ç–µ–ø–ª–∞—è"],
                "price_range": ["–±—é–¥–∂–µ—Ç–Ω–∞—è", "—Å—Ä–µ–¥–Ω—è—è"],
                "weight": 0.9
            },
            "—à–æ–ø–∏–Ω–≥": {
                "colors": ["–ª—é–±—ã–µ", "—É–¥–æ–±–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏"],
                "styles": ["–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π", "–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π", "—É–¥–æ–±–Ω—ã–π"],
                "garments": ["—Ñ—É—Ç–±–æ–ª–∫–∞", "–¥–∂–∏–Ω—Å—ã", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "—Å—É–º–∫–∞"],
                "avoid": ["—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", "–Ω–µ—É–¥–æ–±–Ω—ã–π"],
                "season": ["–ª—é–±–æ–π"],
                "temperature": ["–ª—é–±–∞—è"],
                "price_range": ["–ª—é–±–∞—è"],
                "weight": 0.7
            }
        }
    
    def get_rules(self, occasion: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è"""
        return self.rules.get(occasion, self.rules["casual"])
    
    def score_compatibility(self, item_features: Dict, occasion: str) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —Å–ª—É—á–∞–µ–º"""
        rules = self.get_rules(occasion)
        score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª—å (40% –≤–µ—Å–∞)
        if item_features.get("style") in rules["styles"]:
            score += 0.4
        elif any(avoid in str(item_features.get("style", "")).lower() for avoid in rules["avoid"]):
            score -= 0.2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç (25% –≤–µ—Å–∞)
        if item_features.get("color") in rules["colors"] or "–ª—é–±—ã–µ" in rules["colors"]:
            score += 0.25
        elif item_features.get("color_pattern") and any(color in str(item_features.get("color_pattern", "")).lower() for color in rules["colors"]):
            score += 0.2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–¥–µ–∂–¥—ã (20% –≤–µ—Å–∞)
        if item_features.get("garment_type") in rules["garments"]:
            score += 0.2
        elif item_features.get("garment_category") and any(garment in str(item_features.get("garment_category", "")).lower() for garment in rules["garments"]):
            score += 0.15
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∑–æ–Ω (10% –≤–µ—Å–∞)
        if item_features.get("season") in rules.get("season", ["–ª—é–±–æ–π"]):
            score += 0.1
        elif item_features.get("season_weather") and any(season in str(item_features.get("season_weather", "")).lower() for season in rules.get("season", ["–ª—é–±–æ–π"])):
            score += 0.05
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (5% –≤–µ—Å–∞)
        if item_features.get("price_range") in rules.get("price_range", ["–ª—é–±–∞—è"]):
            score += 0.05
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å —Å–ª—É—á–∞—è
        final_score = max(0.0, min(1.0, score * rules["weight"]))
        
        return final_score


class OutfitBuilder:
    """–°–±–æ—Ä—â–∏–∫ –æ–±—Ä–∞–∑–æ–≤ –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞"""
    
    def __init__(self):
        self.vit_model = FashionViT()
        self.occasion_rules = OccasionRules()
        self.wardrobe = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–∞—Ä–¥–µ—Ä–æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    def add_item_to_wardrobe(self, item_id: str, image: Image.Image, 
                           features: Dict = None) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –≥–∞—Ä–¥–µ—Ä–æ–±"""
        self.wardrobe[item_id] = {
            "image": image,
            "features": features or {},
            "embedding": None
        }
    
    def generate_outfit(self, occasion: str = "casual", 
                       max_items: int = 5) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è"""
        
        if len(self.wardrobe) < 2:
            return {
                "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –≥–∞—Ä–¥–µ—Ä–æ–±–µ (–º–∏–Ω–∏–º—É–º 2)",
                "outfit": [],
                "confidence": 0.0
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞
        items = list(self.wardrobe.values())
        item_images = [item["image"] for item in items]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é ViT
        compatibility_scores, outfit_scores = self.vit_model(item_images, occasion)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å–ª—É—á–∞—è
        occasion_scores = []
        for i, item in enumerate(items):
            if item["features"]:
                score = self.occasion_rules.score_compatibility(item["features"], occasion)
                occasion_scores.append(score)
            else:
                occasion_scores.append(0.5)  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ü–µ–Ω–∫–∏ ViT –∏ –ø—Ä–∞–≤–∏–ª
        final_scores = []
        for i in range(len(items)):
            vit_score = torch.sigmoid(compatibility_scores[i]).item()
            occasion_score = occasion_scores[i]
            final_score = (vit_score * 0.7) + (occasion_score * 0.3)
            final_scores.append(final_score)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        item_ids = list(self.wardrobe.keys())
        sorted_indices = sorted(range(len(final_scores)), 
                               key=lambda i: final_scores[i], reverse=True)
        
        selected_items = []
        for i in sorted_indices[:max_items]:
            if final_scores[i] > 0.3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                selected_items.append({
                    "item_id": item_ids[i],
                    "image": items[i]["image"],
                    "features": items[i]["features"],
                    "score": final_scores[i]
                })
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if selected_items:
            confidence = np.mean([item["score"] for item in selected_items])
        else:
            confidence = 0.0
        
        return {
            "outfit": selected_items,
            "confidence": confidence,
            "occasion": occasion,
            "total_items": len(selected_items),
            "explanation": self._generate_explanation(selected_items, occasion)
        }
    
    def _generate_explanation(self, outfit: List[Dict], occasion: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞"""
        if not outfit:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–∑"
        
        explanation_parts = [f"–û–±—Ä–∞–∑ –¥–ª—è —Å–ª—É—á–∞—è '{occasion}':"]
        
        for item in outfit:
            features = item["features"]
            if features:
                parts = []
                if features.get("garment_type"):
                    parts.append(features["garment_type"])
                if features.get("color"):
                    parts.append(features["color"])
                if features.get("style"):
                    parts.append(features["style"])
                
                if parts:
                    explanation_parts.append(f"‚Ä¢ {' '.join(parts)} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {item['score']:.1%})")
        
        return "\n".join(explanation_parts)
    
    def get_wardrobe_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞—Ä–¥–µ—Ä–æ–±–∞"""
        return {
            "total_items": len(self.wardrobe),
            "item_types": list(set(item["features"].get("garment_type", "unknown") 
                                 for item in self.wardrobe.values())),
            "colors": list(set(item["features"].get("color", "unknown") 
                            for item in self.wardrobe.values())),
            "styles": list(set(item["features"].get("style", "unknown") 
                             for item in self.wardrobe.values()))
        }


class ViTOutfitManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ViT —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–Ω—Å–∞–º–±–ª–µ–º"""
    
    def __init__(self):
        self.outfit_builder = OutfitBuilder()
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –º–æ–¥–µ–ª—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        self.outfit_builder.vit_model.to(self.device)
        
    def add_item_from_analysis(self, image: Image.Image, analysis: Dict) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –≥–∞—Ä–¥–µ—Ä–æ–± –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω—Å–∞–º–±–ª—è"""
        import uuid
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        features = {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ FashionCLIP
        if "fashion_clip" in analysis:
            clip = analysis["fashion_clip"]
            
            # –¢–∏–ø –æ–¥–µ–∂–¥—ã
            if "garment_category" in clip:
                features["garment_type"] = clip["garment_category"]["best_match"]["item"]
                features["garment_category"] = clip["garment_category"]["best_match"]["item"]
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ç–∫–∞–Ω—å
            if "material_fabric" in clip:
                features["material"] = clip["material_fabric"]["best_match"]["item"]
                features["material_fabric"] = clip["material_fabric"]["best_match"]["item"]
            
            # –¶–≤–µ—Ç –∏ –ø–∞—Ç—Ç–µ—Ä–Ω
            if "color_pattern" in clip:
                features["color"] = clip["color_pattern"]["best_match"]["item"]
                features["color_pattern"] = clip["color_pattern"]["best_match"]["item"]
            
            # –°—Ç–∏–ª—å –∏ —Å–ª—É—á–∞–π
            if "style_occasion" in clip:
                features["style"] = clip["style_occasion"]["best_match"]["item"]
                features["style_occasion"] = clip["style_occasion"]["best_match"]["item"]
            
            # –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if "season_weather" in clip:
                features["season"] = clip["season_weather"]["best_match"]["item"]
                features["season_weather"] = clip["season_weather"]["best_match"]["item"]
            
            if "body_type_fit" in clip:
                features["fit"] = clip["body_type_fit"]["best_match"]["item"]
                features["body_type_fit"] = clip["body_type_fit"]["best_match"]["item"]
            
            if "age_group" in clip:
                features["age_group"] = clip["age_group"]["best_match"]["item"]
            
            if "price_range" in clip:
                features["price_range"] = clip["price_range"]["best_match"]["item"]
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if "integrated_analysis" in analysis:
            integrated = analysis["integrated_analysis"]
            
            if "primary_garment" in integrated:
                garment = integrated["primary_garment"]
                features.update({
                    "garment_type": garment.get("type", features.get("garment_type", "unknown")),
                    "style": garment.get("style", features.get("style", "unknown")),
                    "material": garment.get("material", features.get("material", "unknown")),
                    "color": garment.get("color", features.get("color", "unknown"))
                })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        item_id = str(uuid.uuid4())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–∞—Ä–¥–µ—Ä–æ–±
        self.outfit_builder.add_item_to_wardrobe(item_id, image, features)
        
        return item_id
    
    def generate_outfit_for_occasion(self, occasion: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è"""
        return self.outfit_builder.generate_outfit(occasion)
    
    def get_wardrobe_info(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞—Ä–¥–µ—Ä–æ–±–µ"""
        return self.outfit_builder.get_wardrobe_stats()
    
    def clear_wardrobe(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≥–∞—Ä–¥–µ—Ä–æ–±"""
        self.outfit_builder.wardrobe.clear()


if __name__ == "__main__":
    print("üéØ ViT Outfit Builder - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
