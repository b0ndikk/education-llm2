import torch
import torch.nn as nn
import numpy as np
from sklearn.calibration import CalibratedClassifierCV
from sklearn.ensemble import VotingClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score
import cv2
from PIL import Image
import random
from typing import Dict, List, Tuple, Any
import warnings

class AccuracyEnhancer:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–Ω—Å–∞–º–±–ª—è –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.calibrated_models = {}
        self.ensemble_weights = {}
        self.augmentation_pipeline = None
        self.hierarchical_classifier = None
        self._setup_enhancements()
    
    def _setup_enhancements(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π —Ç–æ—á–Ω–æ—Å—Ç–∏...")
        
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –∞–Ω—Å–∞–º–±–ª—è
        self._setup_ensemble_weights()
        
        # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        self._setup_confidence_calibration()
        
        # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        self._setup_data_augmentation()
        
        # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self._setup_hierarchical_classification()
        
        print("‚úÖ –£–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    
    def _setup_ensemble_weights(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –∞–Ω—Å–∞–º–±–ª—è"""
        self.ensemble_weights = {
            'fashion_clip': 0.4,      # –°—Ç–∏–ª—å –∏ –º–æ–¥–∞
            'deepfashion_cnn': 0.3,   # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–µ–∂–¥—ã
            'yolo': 0.2,              # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
            'vit': 0.1                # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        }
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.adaptive_weights = {
            'performance_history': {},
            'confidence_threshold': 0.7,
            'weight_adjustment_rate': 0.1
        }
    
    def _setup_confidence_calibration(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        self.calibration_methods = {
            'platt_scaling': True,
            'isotonic_regression': True,
            'temperature_scaling': True
        }
        
        # –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.calibration_params = {
            'temperature': 1.0,
            'bias': 0.0,
            'scale': 1.0
        }
    
    def _setup_data_augmentation(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.augmentation_transforms = {
            'rotation': {'angle_range': (-15, 15)},
            'brightness': {'factor_range': (0.8, 1.2)},
            'contrast': {'factor_range': (0.8, 1.2)},
            'saturation': {'factor_range': (0.8, 1.2)},
            'hue': {'shift_range': (-0.1, 0.1)},
            'flip': {'horizontal': True, 'vertical': False},
            'crop': {'scale_range': (0.8, 1.0)},
            'noise': {'std_range': (0, 0.1)}
        }
    
    def _setup_hierarchical_classification(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.hierarchy_levels = {
            'level_1': 'clothing_type',      # –û–¥–µ–∂–¥–∞ / –û–±—É–≤—å / –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
            'level_2': 'garment_category',   # –í–µ—Ä—Ö / –ù–∏–∑ / –û–±—É–≤—å
            'level_3': 'specific_item',      # –§—É—Ç–±–æ–ª–∫–∞ / –î–∂–∏–Ω—Å—ã / –ö—Ä–æ—Å—Å–æ–≤–∫–∏
            'level_4': 'style_details'       # –°—Ç–∏–ª—å / –¶–≤–µ—Ç / –ú–∞—Ç–µ—Ä–∏–∞–ª
        }
        
        # –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        self.hierarchical_rules = {
            'clothing_type': ['–æ–¥–µ–∂–¥–∞', '–æ–±—É–≤—å', '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã'],
            'garment_category': ['–≤–µ—Ä—Ö', '–Ω–∏–∑', '–æ–±—É–≤—å', '–≤–µ—Ä—Ö–Ω—è—è_–æ–¥–µ–∂–¥–∞'],
            'specific_item': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–∫—É—Ä—Ç–∫–∞'],
            'style_details': ['—Å—Ç–∏–ª—å', '—Ü–≤–µ—Ç', '–º–∞—Ç–µ—Ä–∏–∞–ª', '—Å–µ–∑–æ–Ω']
        }
    
    def apply_ensemble_weights(self, predictions: Dict[str, Any]) -> Dict[str, float]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤–µ—Å–∞ –∞–Ω—Å–∞–º–±–ª—è –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º"""
        weighted_predictions = {}
        
        for model_name, prediction in predictions.items():
            if model_name in self.ensemble_weights:
                weight = self.ensemble_weights[model_name]
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å –∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                if 'confidence' in prediction:
                    weighted_confidence = prediction['confidence'] * weight
                    weighted_predictions[model_name] = {
                        **prediction,
                        'weighted_confidence': weighted_confidence,
                        'weight': weight
                    }
                else:
                    weighted_predictions[model_name] = prediction
        
        return weighted_predictions
    
    def calibrate_confidence(self, predictions: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–∞–ª–∏–±—Ä—É–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        calibrated_predictions = {}
        
        for model_name, prediction in predictions.items():
            if 'confidence' in prediction:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                temperature = self.calibration_params['temperature']
                calibrated_conf = self._temperature_scaling(
                    prediction['confidence'], temperature
                )
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º Platt scaling
                calibrated_conf = self._platt_scaling(calibrated_conf)
                
                calibrated_predictions[model_name] = {
                    **prediction,
                    'calibrated_confidence': calibrated_conf,
                    'original_confidence': prediction['confidence']
                }
            else:
                calibrated_predictions[model_name] = prediction
        
        return calibrated_predictions
    
    def _temperature_scaling(self, confidence: float, temperature: float) -> float:
        """–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        return torch.softmax(torch.tensor([confidence, 1-confidence]) / temperature, dim=0)[0].item()
    
    def _platt_scaling(self, confidence: float) -> float:
        """Platt scaling –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Platt scaling
        return 1 / (1 + np.exp(-(confidence - 0.5) * 4))
    
    def augment_image(self, image: Image.Image, num_augmentations: int = 3) -> List[Image.Image]:
        """–ê—É–≥–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
        augmented_images = [image]  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        for _ in range(num_augmentations):
            aug_image = image.copy()
            
            # –°–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if random.random() < 0.7:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                aug_image = self._apply_rotation(aug_image)
            
            if random.random() < 0.5:  # 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                aug_image = self._apply_brightness_contrast(aug_image)
            
            if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                aug_image = self._apply_noise(aug_image)
            
            if random.random() < 0.4:  # 40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                aug_image = self._apply_crop(aug_image)
            
            augmented_images.append(aug_image)
        
        return augmented_images
    
    def _apply_rotation(self, image: Image.Image) -> Image.Image:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
        angle = random.uniform(*self.augmentation_transforms['rotation']['angle_range'])
        return image.rotate(angle, fillcolor=(255, 255, 255))
    
    def _apply_brightness_contrast(self, image: Image.Image) -> Image.Image:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞"""
        brightness = random.uniform(*self.augmentation_transforms['brightness']['factor_range'])
        contrast = random.uniform(*self.augmentation_transforms['contrast']['factor_range'])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        img_array = np.array(image)
        img_array = np.clip(img_array * brightness, 0, 255)
        img_array = np.clip((img_array - 128) * contrast + 128, 0, 255)
        
        return Image.fromarray(img_array.astype(np.uint8))
    
    def _apply_noise(self, image: Image.Image) -> Image.Image:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à—É–º –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
        std = random.uniform(*self.augmentation_transforms['noise']['std_range'])
        img_array = np.array(image)
        noise = np.random.normal(0, std * 255, img_array.shape)
        img_array = np.clip(img_array + noise, 0, 255)
        
        return Image.fromarray(img_array.astype(np.uint8))
    
    def _apply_crop(self, image: Image.Image) -> Image.Image:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ"""
        scale = random.uniform(*self.augmentation_transforms['crop']['scale_range'])
        width, height = image.size
        new_width = int(width * scale)
        new_height = int(height * scale)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ
        left = (width - new_width) // 2
        top = (height - new_height) // 2
        right = left + new_width
        bottom = top + new_height
        
        return image.crop((left, top, right, bottom)).resize((width, height))
    
    def hierarchical_classify(self, predictions: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        hierarchical_results = {}
        
        for model_name, prediction in predictions.items():
            if 'category' in prediction:
                category = prediction['category']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
                hierarchy_level = self._determine_hierarchy_level(category)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
                refined_prediction = self._apply_hierarchical_rules(
                    category, hierarchy_level
                )
                
                hierarchical_results[model_name] = {
                    **prediction,
                    'hierarchy_level': hierarchy_level,
                    'refined_prediction': refined_prediction
                }
            else:
                hierarchical_results[model_name] = prediction
        
        return hierarchical_results
    
    def _determine_hierarchy_level(self, category: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_lower = category.lower()
        
        # –£—Ä–æ–≤–µ–Ω—å 1: –¢–∏–ø –æ–¥–µ–∂–¥—ã
        if any(item in category_lower for item in ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–ø–ª–∞—Ç—å–µ', '–¥–∂–∏–Ω—Å—ã']):
            return 'clothing_type'
        
        # –£—Ä–æ–≤–µ–Ω—å 2: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–¥–µ–∂–¥—ã
        elif any(item in category_lower for item in ['–≤–µ—Ä—Ö', '–Ω–∏–∑', '–æ–±—É–≤—å']):
            return 'garment_category'
        
        # –£—Ä–æ–≤–µ–Ω—å 3: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        elif any(item in category_lower for item in ['—Ñ—É—Ç–±–æ–ª–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏']):
            return 'specific_item'
        
        # –£—Ä–æ–≤–µ–Ω—å 4: –î–µ—Ç–∞–ª–∏ —Å—Ç–∏–ª—è
        else:
            return 'style_details'
    
    def _apply_hierarchical_rules(self, category: str, level: str) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞"""
        rules = self.hierarchical_rules.get(level, [])
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
        best_match = None
        best_score = 0
        
        for rule in rules:
            if rule in category.lower():
                score = len(rule) / len(category)
                if score > best_score:
                    best_score = score
                    best_match = rule
        
        return {
            'original_category': category,
            'hierarchical_category': best_match or category,
            'confidence': best_score,
            'level': level
        }
    
    def enhance_predictions(self, predictions: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º"""
        enhanced_predictions = predictions.copy()
        
        # 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å–∞ –∞–Ω—Å–∞–º–±–ª—è
        enhanced_predictions = self.apply_ensemble_weights(enhanced_predictions)
        
        # 2. –ö–∞–ª–∏–±—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        enhanced_predictions = self.calibrate_confidence(enhanced_predictions)
        
        # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        enhanced_predictions = self.hierarchical_classify(enhanced_predictions)
        
        # 4. –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        enhanced_predictions['final_score'] = self._calculate_final_score(enhanced_predictions)
        
        return enhanced_predictions
    
    def _calculate_final_score(self, predictions: Dict[str, Any]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
        scores = []
        weights = []
        
        for model_name, prediction in predictions.items():
            if model_name in self.ensemble_weights:
                weight = self.ensemble_weights[model_name]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                confidence = prediction.get('calibrated_confidence', 
                                          prediction.get('confidence', 0.5))
                
                scores.append(confidence)
                weights.append(weight)
        
        if scores and weights:
            return np.average(scores, weights=weights)
        else:
            return 0.5
    
    def get_enhancement_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö"""
        return {
            'ensemble_weights': self.ensemble_weights,
            'calibration_methods': self.calibration_methods,
            'augmentation_transforms': list(self.augmentation_transforms.keys()),
            'hierarchy_levels': self.hierarchy_levels,
            'status': 'active'
        }
