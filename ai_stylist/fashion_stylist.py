#!/usr/bin/env python3
"""
üéØ ULTIMATE AI-–°–¢–ò–õ–ò–°–¢ - –ú–ò–†–û–í–û–ô –£–†–û–í–ï–ù–¨ –û–ü–ò–°–ê–ù–ò–Ø –û–î–ï–ñ–î–´
"""

import os
import sys
import torch
import numpy as np
from PIL import Image
import gradio as gr
import torchvision.transforms as transforms
from typing import Dict, List, Tuple, Optional
import cv2
from collections import Counter
import re

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['HF_HOME'] = os.path.expanduser('~/.cache/huggingface')
os.environ['TRANSFORMERS_CACHE'] = os.path.expanduser('~/.cache/huggingface')

from transformers import CLIPModel, CLIPProcessor

class GlobalFashionAIStylist:
    def __init__(self):
        """AI-—Å—Ç–∏–ª–∏—Å—Ç –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –í–°–ï–ô –æ–¥–µ–∂–¥—ã"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GLOBAL AI-—Å—Ç–∏–ª–∏—Å—Ç–∞...")
        
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        print(f"üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º FashionCLIP
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º FashionCLIP...")
        self.model = CLIPModel.from_pretrained('patrickjohncyh/fashion-clip').to(self.device)
        self.processor = CLIPProcessor.from_pretrained('patrickjohncyh/fashion-clip')
        print("‚úÖ FashionCLIP –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        # –ú–ò–†–û–í–ê–Ø –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –û–ë –û–î–ï–ñ–î–ï - –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –ü–†–û–ú–¢–´
        self.categories = self._create_global_fashion_prompts()
        
        print("‚úÖ GLOBAL AI-—Å—Ç–∏–ª–∏—Å—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    def _create_global_fashion_prompts(self) -> Dict[str, List[str]]:
        """–°–æ–∑–¥–∞–µ—Ç –ú–ò–†–û–í–£–Æ –±–∞–∑—É –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è –≤—Å–µ–π –æ–¥–µ–∂–¥—ã"""
        
        return {
            # –û–°–ù–û–í–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò –û–î–ï–ñ–î–´ - –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –ü–û–î–•–û–î
            'garment_category': [
                # –í–ï–†–•–ù–Ø–Ø –û–î–ï–ñ–î–ê
                "winter coat", "trench coat", "peacoat", "duffle coat", "parka jacket", 
                "puffer jacket", "bomber jacket", "leather jacket", "denim jacket", "blazer",
                "cardigan", "hoodie", "sweater", "pullover", "windbreaker",
                
                # –†–£–ë–ê–®–ö–ò –ò –ë–õ–£–ó–ö–ò
                "dress shirt", "casual shirt", "flannel shirt", "hawaiian shirt", "polo shirt",
                "t-shirt", "blouse", "silk blouse", "chiffon blouse", "button-down shirt",
                
                # –ü–õ–ê–¢–¨–Ø –ò –Æ–ë–ö–ò
                "cocktail dress", "maxi dress", "mini dress", "shift dress", "bodycon dress",
                "a-line skirt", "pencil skirt", "pleated skirt", "wrap skirt", "midi skirt",
                
                # –ë–†–Æ–ö–ò –ò –®–û–†–¢–´
                "dress pants", "chino pants", "cargo pants", "wide-leg pants", "skinny jeans",
                "straight jeans", "bootcut jeans", "leggings", "joggers", "bermuda shorts",
                
                # –ù–ò–ñ–ù–ï–ï –ë–ï–õ–¨–ï
                "bra", "panties", "lingerie set", "bodysuit", "camisole",
                "boxer shorts", "briefs", "long underwear", "shapewear",
                
                # –°–ü–û–†–¢–ò–í–ù–ê–Ø –û–î–ï–ñ–î–ê
                "tracksuit", "yoga pants", "gym shorts", "sports bra", "swimsuit",
                "bikini", "trunks", "rash guard", "cycling shorts",
                
                # –¢–†–ê–î–ò–¶–ò–û–ù–ù–ê–Ø –û–î–ï–ñ–î–ê
                "kimono", "sari", "hanbok", "cheongsam", "ao dai",
                "kilt", "dirndl", "poncho", "sarong", "thobe"
            ],
            
            'garment_details': [
                # –î–ï–¢–ê–õ–ò –ü–û–ö–†–û–Ø –ò –°–ò–õ–£–≠–¢–ê
                "fitted silhouette", "loose fit", "oversized cut", "tailored fit", "relaxed fit",
                "asymmetric hem", "high waist", "low rise", "empire waist", "drop shoulder",
                
                # –¢–ò–ü–´ –†–£–ö–ê–í–û–í
                "long sleeves", "short sleeves", "sleeveless", "three-quarter sleeves", 
                "raglan sleeves", "puffed sleeves", "bell sleeves", "batwing sleeves",
                
                # –í–û–†–û–¢–ù–ò–ö–ò –ò –ì–û–†–õ–û–í–ò–ù–ê
                "round neckline", "v-neckline", "crew neck", "turtle neck", "boat neck",
                "scoop neck", "square neck", "off-shoulder", "halter neck", "cowl neck",
                
                # –ó–ê–°–¢–ï–ñ–ö–ò –ò –ó–ê–ú–ö–ò
                "button front", "zipper closure", "pullover style", "wrap style", "tie closure",
                "hook and eye", "snap buttons", "frog closures", "elastic waist", "drawstring",
                
                # –ö–ê–†–ú–ê–ù–´
                "patch pockets", "slit pockets", "flap pockets", "zippered pockets", "no pockets",
                "chest pocket", "side pockets", "back pockets", "cargo pockets",
                
                # –î–ï–ö–û–†–ê–¢–ò–í–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´
                "embroidery details", "lace trim", "beaded work", "sequin accents", "print pattern",
                "contrast stitching", "fringe details", "ruffle trim", "pleated details", "quilted pattern"
            ],
            
            'material_fabric': [
                # –ù–ê–¢–£–†–ê–õ–¨–ù–´–ï –¢–ö–ê–ù–ò
                "cotton fabric", "linen fabric", "silk fabric", "wool fabric", "cashmere fabric",
                "denim fabric", "leather material", "suede material", "fur material", "felt fabric",
                
                # –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–ï –¢–ö–ê–ù–ò
                "polyester fabric", "nylon fabric", "rayon fabric", "spandex fabric", "acrylic fabric",
                "velvet fabric", "satin fabric", "chiffon fabric", "organza fabric", "tulle fabric",
                
                # –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–ö–ê–ù–ò
                "waterproof fabric", "breathable fabric", "stretch fabric", "technical fabric", 
                "performance fabric", "moisture-wicking", "thermal insulation", "ripstop fabric",
                
                # –°–ú–ï–°–û–í–´–ï –¢–ö–ê–ù–ò
                "cotton-polyester blend", "wool-synthetic blend", "linen-cotton blend", "silk-wool blend"
            ],
            
            'color_pattern': [
                # –ë–ê–ó–û–í–´–ï –¶–í–ï–¢–ê
                "black color", "white color", "navy blue", "charcoal gray", "beige color",
                "brown color", "burgundy color", "forest green", "purple color", "pink color",
                
                # –ü–ê–¢–¢–ï–†–ù–´ –ò –ü–†–ò–ù–¢–´
                "solid color", "striped pattern", "floral print", "animal print", "geometric pattern",
                "paisley pattern", "polka dot", "checkered pattern", "houndstooth", "plaid pattern",
                "camouflage print", "tie-dye pattern", "abstract print", "ethnic pattern",
                
                # –¶–í–ï–¢–û–í–´–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ò
                "color block", "ombre effect", "gradient colors", "contrast trim", "monochromatic"
            ],
            
            'style_occasion': [
                # –°–¢–ò–õ–ò
                "casual style", "formal style", "business style", "sporty style", "vintage style",
                "bohemian style", "minimalist style", "streetwear style", "preppy style", "romantic style",
                
                # –ü–û–í–û–î–´
                "everyday wear", "office appropriate", "evening occasion", "wedding guest", 
                "cocktail party", "business meeting", "date night", "vacation wear",
                "beach appropriate", "winter season", "summer season"
            ],
            
            'brand_origin': [
                # –ú–ò–†–û–í–´–ï –ë–†–ï–ù–î–´
                "luxury designer brand", "premium fashion brand", "fast fashion brand", 
                "sportswear brand", "streetwear brand", "vintage clothing", 
                "local designer", "independent brand", "mass market brand"
            ]
        }
    
    def _create_dynamic_prompts(self, detected_category: str) -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        
        dynamic_prompts = []
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–†–û–ú–¢–´ –î–õ–Ø –ö–ê–ñ–î–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò
        category_specific = {
            'dress': [
                "a-line dress with {details} in {color}",
                "{length} dress made of {material} for {occasion}",
                "{style} dress with {sleeve_type} sleeves and {neckline}",
                "women's {type} dress featuring {pattern} pattern"
            ],
            'shirt': [
                "{sleeve_length} shirt with {collar_type} collar in {color}",
                "{style} shirt made from {material} with {details}",
                "{fit_type} fit shirt with {pattern} for {occasion}"
            ],
            'pants': [
                "{fit_type} {style} pants in {color} {material}",
                "{length} pants with {waist_type} waist and {details}",
                "{occasion} appropriate trousers with {pattern}"
            ],
            'shoes': [
                "{type} shoes in {color} {material} for {occasion}",
                "{style} footwear with {heel_type} and {details}",
                "{brand} {category} shoes with {closure_type}"
            ],
            'jacket': [
                "{type} jacket in {color} {material} with {details}",
                "{style} outerwear with {lining_type} lining for {season}",
                "{length} coat with {closure_type} and {pocket_type} pockets"
            ]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø—Ä–æ–º—Ç—ã
        general_prompts = [
            "fashion photography of {category} in {color} with {details}",
            "product shot of {material} {category} for {occasion}",
            "{style} clothing item: {category} with {pattern}",
            "garment details: {category} featuring {details}"
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º—Ç—ã
        for cat, prompts in category_specific.items():
            if cat in detected_category.lower():
                dynamic_prompts.extend(prompts)
        
        dynamic_prompts.extend(general_prompts)
        return dynamic_prompts
    
    def analyze_garment_structure(self, image: Image.Image) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–¥–µ–∂–¥—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy –¥–ª—è OpenCV
            img_array = np.array(image)
            
            analysis = {
                'dominant_colors': self._extract_dominant_colors(img_array),
                'contour_shape': self._analyze_garment_shape(img_array),
                'texture_complexity': self._analyze_texture_complexity(img_array),
                'symmetry_score': self._analyze_symmetry(img_array)
            }
            
            return analysis
        except Exception as e:
            return {'error': f'Structure analysis failed: {str(e)}'}
    
    def _extract_dominant_colors(self, img_array: np.ndarray) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            img_small = cv2.resize(img_array, (100, 100))
            pixels = img_small.reshape(-1, 3)
            
            # K-means –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤
            criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 20, 1.0)
            _, labels, centers = cv2.kmeans(pixels.astype(np.float32), 5, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
            color_names = []
            for color in centers:
                color_names.append(self._rgb_to_color_name(color))
            
            return color_names
        except:
            return ['unknown color']
    
    def _rgb_to_color_name(self, rgb: np.ndarray) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç RGB –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞"""
        color_map = {
            'black': [0, 0, 0],
            'white': [255, 255, 255],
            'red': [255, 0, 0],
            'blue': [0, 0, 255],
            'green': [0, 255, 0],
            'yellow': [255, 255, 0],
            'purple': [128, 0, 128],
            'pink': [255, 192, 203],
            'brown': [165, 42, 42],
            'gray': [128, 128, 128],
            'navy': [0, 0, 128],
            'beige': [245, 245, 220]
        }
        
        min_distance = float('inf')
        closest_color = 'unknown'
        
        for name, ref_rgb in color_map.items():
            distance = np.linalg.norm(rgb - ref_rgb)
            if distance < min_distance:
                min_distance = distance
                closest_color = name
        
        return closest_color
    
    def _analyze_garment_shape(self, img_array: np.ndarray) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É –æ–¥–µ–∂–¥—ã"""
        try:
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
            edges = cv2.Canny(gray, 50, 150)
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—É—Ä–æ–≤
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            if not contours:
                return "unknown shape"
            
            largest_contour = max(contours, key=cv2.contourArea)
            x, y, w, h = cv2.boundingRect(largest_contour)
            
            aspect_ratio = w / h
            
            if aspect_ratio > 1.5:
                return "elongated silhouette"
            elif aspect_ratio < 0.7:
                return "vertical silhouette"
            else:
                return "balanced silhouette"
                
        except:
            return "standard silhouette"
    
    def _analyze_texture_complexity(self, img_array: np.ndarray) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—ã"""
        try:
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –õ–∞–ø–ª–∞—Å–∏–∞–Ω–∞ –∫–∞–∫ –º–µ—Ä—É —Ç–µ–∫—Å—Ç—É—Ä—ã
            laplacian_var = cv2.Laplacian(gray, cv2.CV_64F).var()
            
            if laplacian_var < 100:
                return "smooth texture"
            elif laplacian_var < 500:
                return "medium texture"
            else:
                return "complex texture"
        except:
            return "standard texture"
    
    def _analyze_symmetry(self, img_array: np.ndarray) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–º–º–µ—Ç—Ä–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            height, width = img_array.shape[:2]
            mid = width // 2
            
            left_half = img_array[:, :mid]
            right_half = img_array[:, mid:]
            
            # –ó–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ–º –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            right_flipped = cv2.flip(right_half, 1)
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            min_height = min(left_half.shape[0], right_flipped.shape[0])
            min_width = min(left_half.shape[1], right_flipped.shape[1])
            
            left_cropped = left_half[:min_height, :min_width]
            right_cropped = right_flipped[:min_height, :min_width]
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            correlation = cv2.compareHist(
                cv2.calcHist([left_cropped], [0], None, [256], [0, 256]),
                cv2.calcHist([right_cropped], [0], None, [256], [0, 256]),
                cv2.HISTCMP_CORREL
            )
            
            return float(correlation)
        except:
            return 0.5
    
    def analyze_outfit(self, image: Image.Image) -> Dict:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–µ–∂–¥—ã —Å –º–∏—Ä–æ–≤—ã–º –æ—Ö–≤–∞—Ç–æ–º"""
        try:
            # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            structure_analysis = self.analyze_garment_structure(image)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ FashionCLIP
            analysis = {}
            
            for category, options in self.categories.items():
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤—Ö–æ–¥—ã
                text_inputs = self.processor(text=options, return_tensors="pt", padding=True)
                text_inputs = {k: v.to(self.device) for k, v in text_inputs.items()}
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_inputs = self.processor(images=image, return_tensors="pt")
                image_inputs = {k: v.to(self.device) for k, v in image_inputs.items()}
                
                with torch.no_grad():
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                    image_features = self.model.get_image_features(**image_inputs)
                    text_features = self.model.get_text_features(**text_inputs)
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                    image_features = torch.nn.functional.normalize(image_features, p=2, dim=1)
                    text_features = torch.nn.functional.normalize(text_features, p=2, dim=1)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —à–∫–∞–ª–æ–π
                    similarities = torch.matmul(image_features, text_features.T)[0]
                    temperature = 2.0
                    similarities = similarities / temperature
                    
                    # Softmax –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                    probabilities = torch.softmax(similarities, dim=0)
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                top_indices = torch.topk(probabilities, 3).indices
                top_results = [
                    {
                        'item': options[i],
                        'confidence': probabilities[i].item()
                    }
                    for i in top_indices
                ]
                
                analysis[category] = {
                    'best_match': top_results[0],
                    'alternatives': top_results[1:],
                    'all_scores': {options[i]: probabilities[i].item() for i in top_indices}
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analysis['structure'] = structure_analysis
            
            return analysis
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}
    
    def generate_comprehensive_description(self, analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–µ–∂–¥—ã"""
        if "error" in analysis:
            return f"‚ùå {analysis['error']}"
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            category = analysis['garment_category']['best_match']['item']
            details = analysis['garment_details']['best_match']['item']
            material = analysis['material_fabric']['best_match']['item']
            color = analysis['color_pattern']['best_match']['item']
            style = analysis['style_occasion']['best_match']['item']
            
            # –°—Ç—Ä–æ–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description_parts = []
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            description_parts.append(f"**{category.upper()}**")
            
            # –î–µ—Ç–∞–ª–∏
            description_parts.append(f"‚Ä¢ **–ú–∞—Ç–µ—Ä–∏–∞–ª:** {material}")
            description_parts.append(f"‚Ä¢ **–¶–≤–µ—Ç/–ü—Ä–∏–Ω—Ç:** {color}")
            description_parts.append(f"‚Ä¢ **–°—Ç–∏–ª—å:** {style}")
            description_parts.append(f"‚Ä¢ **–î–µ—Ç–∞–ª–∏:** {details}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
            if 'structure' in analysis:
                structure = analysis['structure']
                if 'dominant_colors' in structure:
                    colors = [c for c in structure['dominant_colors'] if c != 'unknown color']
                    if colors:
                        description_parts.append(f"‚Ä¢ **–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞:** {', '.join(colors[:2])}")
                
                if 'contour_shape' in structure:
                    description_parts.append(f"‚Ä¢ **–°–∏–ª—É—ç—Ç:** {structure['contour_shape']}")
                
                if 'texture_complexity' in structure:
                    description_parts.append(f"‚Ä¢ **–¢–µ–∫—Å—Ç—É—Ä–∞:** {structure['texture_complexity']}")
            
            return "\n".join(description_parts)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
    
    def get_global_recommendations(self, analysis: Dict) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if "error" in analysis:
            return [f"‚ùå {analysis['error']}"]
        
        recommendations = []
        
        try:
            category = analysis['garment_category']['best_match']['item']
            style = analysis['style_occasion']['best_match']['item']
            color = analysis['color_pattern']['best_match']['item']
            material = analysis['material_fabric']['best_match']['item']
            
            # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
            recommendations.append("üåç **–ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ï –°–¢–ò–õ–ï–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if any(word in category.lower() for word in ['dress', 'skirt']):
                recommendations.append("üëó **–î–ª—è –ø–ª–∞—Ç—å–µ–≤ –∏ —é–±–æ–∫:**")
                recommendations.append("   ‚Ä¢ –°–æ—á–µ—Ç–∞–π—Ç–µ —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º–∏ —Ç—É—Ñ–ª—è–º–∏ –∏–ª–∏ –º–æ–¥–Ω—ã–º–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∞–º–∏")
                recommendations.append("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã: –ø–æ—è—Å, —Å—É–º–∫—É, –±–∏–∂—É—Ç–µ—Ä–∏—é")
                recommendations.append("   ‚Ä¢ –î–ª—è –æ—Ñ–∏—Å–∞ - –¥–æ–±–∞–≤—å—Ç–µ –±–ª–µ–π–∑–µ—Ä")
                
            elif any(word in category.lower() for word in ['shirt', 'blouse', 'top']):
                recommendations.append("üëï **–î–ª—è –≤–µ—Ä—Ö–æ–≤:**")
                recommendations.append("   ‚Ä¢ –ó–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤ –±—Ä—é–∫–∏/—é–±–∫—É –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –≤–∏–¥–∞")
                recommendations.append("   ‚Ä¢ –ù–æ—Å–∏—Ç–µ –Ω–∞–≤—ã–ø—É—Å–∫ –¥–ª—è –∫—ç–∂—É–∞–ª —Å—Ç–∏–ª—è")
                recommendations.append("   ‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Å –¥–∂–∏–Ω—Å–∞–º–∏, –±—Ä—é–∫–∞–º–∏, —é–±–∫–∞–º–∏")
                
            elif any(word in category.lower() for word in ['pants', 'jeans']):
                recommendations.append("üëñ **–î–ª—è –±—Ä—é–∫:**")
                recommendations.append("   ‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–±—É–≤—å –ø–æ —Å—Ç–∏–ª—é: –∫–µ–¥—ã/–∫—Ä–æ—Å—Å–æ–≤–∫–∏/—Ç—É—Ñ–ª–∏")
                recommendations.append("   ‚Ä¢ –°–æ—á–µ—Ç–∞–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Ö–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è")
                recommendations.append("   ‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –¥–ª–∏–Ω—É - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–¥–≥–æ–Ω–∫–∞")
                
            elif any(word in category.lower() for word in ['jacket', 'coat', 'blazer']):
                recommendations.append("üß• **–î–ª—è –≤–µ—Ä—Ö–Ω–µ–π –æ–¥–µ–∂–¥—ã:**")
                recommendations.append("   ‚Ä¢ –ù–æ—Å–∏—Ç–µ –ø–æ–≤–µ—Ä—Ö –±–∞–∑–æ–≤—ã—Ö –≤–µ—â–µ–π")
                recommendations.append("   ‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—Å–ª–æ–µ–Ω–∏—è (layering)")
                recommendations.append("   ‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ —Å–µ–∑–æ–Ω—É –∏ –ø–æ–≥–æ–¥–µ")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
            if 'casual' in style.lower():
                recommendations.append("üéØ **–ö—ç–∂—É–∞–ª —Å—Ç–∏–ª—å:**")
                recommendations.append("   ‚Ä¢ –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏")
                recommendations.append("   ‚Ä¢ –°–æ—á–µ—Ç–∞–π—Ç–µ —Å –¥–∂–∏–Ω—Å–∞–º–∏ –∏ —É–¥–æ–±–Ω–æ–π –æ–±—É–≤—å—é")
                recommendations.append("   ‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å—Ç—Ä–µ—á —Å –¥—Ä—É–∑—å—è–º–∏, –ø—Ä–æ–≥—É–ª–æ–∫")
                
            elif 'formal' in style.lower() or 'business' in style.lower():
                recommendations.append("üíº **–§–æ—Ä–º–∞–ª—å–Ω—ã–π/–î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å:**")
                recommendations.append("   ‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ñ–∏—Å–∞ –∏ –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á")
                recommendations.append("   ‚Ä¢ –°–æ—á–µ—Ç–∞–π—Ç–µ —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –æ–±—É–≤—å—é")
                recommendations.append("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã")
                
            elif 'sport' in style.lower():
                recommendations.append("üèÉ **–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å:**")
                recommendations.append("   ‚Ä¢ –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏")
                recommendations.append("   ‚Ä¢ –°–æ—á–µ—Ç–∞–π—Ç–µ —Å–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –æ–±—É–≤—å—é")
                recommendations.append("   ‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–¥—ã—Ö–∞")
            
            # –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if any(word in material.lower() for word in ['wool', 'cashmere', 'fur']):
                recommendations.append("‚ùÑÔ∏è **–ó–∏–º–Ω–∏–π —Å–µ–∑–æ–Ω:**")
                recommendations.append("   ‚Ä¢ –¢–µ–ø–ª—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–π –ø–æ–≥–æ–¥—ã")
                recommendations.append("   ‚Ä¢ –°–æ—á–µ—Ç–∞–π—Ç–µ —Å –∑–∏–º–Ω–∏–º–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏")
                
            elif any(word in material.lower() for word in ['linen', 'cotton', 'light']):
                recommendations.append("‚òÄÔ∏è **–õ–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω:**")
                recommendations.append("   ‚Ä¢ –õ–µ–≥–∫–∏–µ –¥—ã—à–∞—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
                recommendations.append("   ‚Ä¢ –ò–¥–µ–∞–ª—å–Ω—ã –¥–ª—è —Ç–µ–ø–ª–æ–π –ø–æ–≥–æ–¥—ã")
            
            # –£—Ö–æ–¥ –∑–∞ –æ–¥–µ–∂–¥–æ–π
            recommendations.append("üßº **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–•–û–î–£:**")
            if 'leather' in material.lower() or 'suede' in material.lower():
                recommendations.append("   ‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ö–∏–º—á–∏—Å—Ç–∫–∞ –¥–ª—è –∫–æ–∂–∏/–∑–∞–º—à–∏")
                recommendations.append("   ‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–ª–∞–≥–∏ –∏ –ø—Ä—è–º–æ–≥–æ —Å–æ–ª–Ω—Ü–∞")
            elif 'silk' in material.lower() or 'wool' in material.lower():
                recommendations.append("   ‚Ä¢ –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è —Å—Ç–∏—Ä–∫–∞ –∏–ª–∏ —Ö–∏–º—á–∏—Å—Ç–∫–∞")
                recommendations.append("   ‚Ä¢ –°—É—à–∏—Ç—å –≤ —Ä–∞—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –≤–∏–¥–µ")
            else:
                recommendations.append("   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —è—Ä–ª—ã–∫–µ")
                recommendations.append("   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∏—Ä–∫–∞ –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ")
            
        except Exception as e:
            recommendations.append(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
        
        return recommendations

def create_global_fashion_interface():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    
    stylist = GlobalFashionAIStylist()
    
    def analyze_global_outfit(image):
        if image is None:
            return "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã", [], []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–∑
        analysis = stylist.analyze_outfit(image)
        
        if "error" in analysis:
            return f"‚ùå {analysis['error']}", [], []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = stylist.generate_comprehensive_description(analysis)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis_text = "üîç **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n\n"
        for category, data in analysis.items():
            if category != 'structure':
                best = data['best_match']
                analysis_text += f"**{category.replace('_', ' ').title()}:** {best['item']} ({best['confidence']:.1%})\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if 'structure' in analysis:
            structure = analysis['structure']
            analysis_text += "\n**üìê –°–¢–†–£–ö–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n"
            for key, value in structure.items():
                if key != 'error':
                    analysis_text += f"‚Ä¢ {key.replace('_', ' ').title()}: {value}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = stylist.get_global_recommendations(analysis)
        
        return description, analysis_text, recommendations
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    with gr.Blocks(title="üåç GLOBAL AI-–°—Ç–∏–ª–∏—Å—Ç") as interface:
        gr.Markdown("# üåç GLOBAL AI-–°–¢–ò–õ–ò–°–¢")
        gr.Markdown("**–ú–ò–†–û–í–û–ô –£–†–û–í–ï–ù–¨:** –û–ø–∏—Å—ã–≤–∞–µ—Ç –í–°–Æ –æ–¥–µ–∂–¥—É –º–∏—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º")
        
        with gr.Row():
            with gr.Column():
                image_input = gr.Image(type="pil", label="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã")
                analyze_btn = gr.Button("üåç –ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨ –û–î–ï–ñ–î–£", variant="primary")
            
            with gr.Column():
                description_output = gr.Textbox(label="üß¨ –û–ü–ò–°–ê–ù–ò–ï –û–î–ï–ñ–î–´", lines=8)
                analysis_output = gr.Textbox(label="üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó", lines=10)
                recommendations_output = gr.Textbox(label="üí° –ú–ò–†–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", lines=12)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫
        analyze_btn.click(
            fn=analyze_global_outfit,
            inputs=[image_input],
            outputs=[description_output, analysis_output, recommendations_output]
        )
        
        gr.Markdown("""
        ### üåü –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:
        - **–ú–∏—Ä–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π** –æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –æ–¥–µ–∂–¥—ã
        - **–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑** —Å–∏–ª—É—ç—Ç–∞ –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
        - **–¶–≤–µ—Ç–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑** —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤
        - **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É** –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        - **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π** –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–¥–µ–∂–¥—ã
        """)
    
    return interface

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåç GLOBAL AI-–°–¢–ò–õ–ò–°–¢ - –ú–ò–†–û–í–û–ô –£–†–û–í–ï–ù–¨")
    print("=" * 70)
    print("‚ú® –ú–ò–†–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –í–°–ï–ô –æ–¥–µ–∂–¥—ã –º–∏—Ä–∞")
    print("‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–ª—É—ç—Ç–∞ –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã")
    print("‚Ä¢ –¶–≤–µ—Ç–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    print("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏")
    print("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –∏ —ç—Ç–Ω–∏—á–µ—Å–∫–æ–π –æ–¥–µ–∂–¥—ã")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    interface = create_global_fashion_interface()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True
    )

if __name__ == "__main__":
    main()