#!/usr/bin/env python3
"""
üéØ –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–°–ê–ú–ë–õ–¨ –ú–û–î–ï–õ–ï–ô
- FashionCLIP: —Å—Ç–∏–ª—å, —Ü–≤–µ—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª, —Å–µ–∑–æ–Ω
- DeepFashion CNN: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–µ–∂–¥—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
- YOLO: –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è
- ViT: —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
"""

from fashion_clip import FashionCLIPAnalyzer
from yolo_detector import YOLODetector
from deepfashion_cnn import DeepFashionCNN
from accuracy_enhancements import AccuracyEnhancer
from PIL import Image
import numpy as np

class FashionEnsemble:
    def __init__(self):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω—Å–∞–º–±–ª—å —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω—Å–∞–º–±–ª—è...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
        self.fashion_clip = FashionCLIPAnalyzer()
        self.yolo = YOLODetector()
        self.deepfashion = DeepFashionCNN()
        
        # –°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        self.accuracy_enhancer = AccuracyEnhancer()
        
        print("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω—Å–∞–º–±–ª—å —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –≥–æ—Ç–æ–≤!")
    
    def analyze_image(self, image: Image.Image) -> dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            clip_results = self.fashion_clip.analyze_image(image)
            yolo_results = self.yolo.detect_clothing(image)
            deepfashion_results = self.deepfashion.analyze_image(image)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            enhanced_predictions = self._apply_accuracy_enhancements({
                'fashion_clip': clip_results,
                'yolo': yolo_results,
                'deepfashion': deepfashion_results
            })
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
            combined_analysis = self._combine_enhanced_results(
                enhanced_predictions, image
            )
            
            return combined_analysis
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω—Å–∞–º–±–ª—è: {str(e)}"}
    
    def _apply_accuracy_enhancements(self, predictions: dict) -> dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è
            enhanced_predictions = self.accuracy_enhancer.enhance_predictions(predictions)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö
            enhanced_predictions['enhancement_info'] = self.accuracy_enhancer.get_enhancement_info()
            
            return enhanced_predictions
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π: {e}")
            return predictions  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    
    def _combine_enhanced_results(self, enhanced_predictions: dict, image: Image.Image) -> dict:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        
        analysis = {
            'models_used': ['FashionCLIP', 'YOLO', 'DeepFashion CNN'],
            'enhancements_applied': ['Ensemble Weights', 'Confidence Calibration', 'Data Augmentation', 'Hierarchical Classification'],
            'timestamp': np.datetime64('now'),
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysis['enhanced_predictions'] = enhanced_predictions
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        integrated = self._create_enhanced_integrated_analysis(enhanced_predictions, image)
        analysis['integrated_analysis'] = integrated
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        analysis['quality_metrics'] = self._calculate_enhanced_quality_metrics(enhanced_predictions)
        
        return analysis
    
    def _create_enhanced_integrated_analysis(self, enhanced_predictions: dict, image: Image.Image) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        integrated = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        clip_results = enhanced_predictions.get('fashion_clip', {})
        yolo_results = enhanced_predictions.get('yolo', {})
        deepfashion_results = enhanced_predictions.get('deepfashion', {})
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: FashionCLIP - —Å—Ç–∏–ª—å, —Ü–≤–µ—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª, —Å–µ–∑–æ–Ω
        if 'error' not in clip_results:
            integrated['style_analysis'] = {
                'style': clip_results.get('style_occasion', {}).get('best_match', {}).get('item', 'unknown'),
                'style_confidence': clip_results.get('style_occasion', {}).get('best_match', {}).get('confidence', 0.0),
                'material': clip_results.get('material_fabric', {}).get('best_match', {}).get('item', 'unknown'),
                'material_confidence': clip_results.get('material_fabric', {}).get('best_match', {}).get('confidence', 0.0),
                'color': clip_results.get('color_pattern', {}).get('best_match', {}).get('item', 'unknown'),
                'color_confidence': clip_results.get('color_pattern', {}).get('best_match', {}).get('confidence', 0.0),
                'season': clip_results.get('season_weather', {}).get('best_match', {}).get('item', 'unknown'),
                'season_confidence': clip_results.get('season_weather', {}).get('best_match', {}).get('confidence', 0.0),
                'enhanced_confidence': clip_results.get('calibrated_confidence', clip_results.get('confidence', 0.0))
            }
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: DeepFashion CNN - —Ç–∏–ø –æ–¥–µ–∂–¥—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ñ–æ—Ä–º–∞
        if 'error' not in deepfashion_results:
            integrated['garment_classification'] = {
                'category': deepfashion_results.get('category', 'unknown'),
                'confidence': deepfashion_results.get('confidence', 0.0),
                'enhanced_confidence': deepfashion_results.get('calibrated_confidence', deepfashion_results.get('confidence', 0.0)),
                'hierarchical_prediction': deepfashion_results.get('refined_prediction', {}),
                'top_predictions': deepfashion_results.get('top_predictions', []),
                'model': 'DeepFashion CNN'
            }
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: YOLO - –¥–µ—Ç–µ–∫—Ü–∏—è, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        if 'error' not in yolo_results:
            integrated['object_detection'] = {
                'total_objects': yolo_results.get('total_items', 0),
                'layout': yolo_results.get('composition', {}).get('layout', 'unknown'),
                'dominant_region': yolo_results.get('composition', {}).get('dominant_region', 'unknown'),
                'has_clothing': yolo_results.get('has_clothing', False),
                'enhanced_confidence': yolo_results.get('calibrated_confidence', yolo_results.get('confidence', 0.0))
            }
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        integrated['final_score'] = enhanced_predictions.get('final_score', 0.5)
        integrated['enhancement_impact'] = self._calculate_enhancement_impact(enhanced_predictions)
        
        # –°–≤–æ–¥–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        integrated['summary'] = self._generate_enhanced_summary(integrated)
        
        return integrated
    
    def _calculate_enhancement_impact(self, enhanced_predictions: dict) -> dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π"""
        impact = {}
        
        for model_name, prediction in enhanced_predictions.items():
            if model_name in ['fashion_clip', 'yolo', 'deepfashion']:
                original_conf = prediction.get('confidence', 0.0)
                enhanced_conf = prediction.get('calibrated_confidence', original_conf)
                
                impact[model_name] = {
                    'original_confidence': original_conf,
                    'enhanced_confidence': enhanced_conf,
                    'improvement': enhanced_conf - original_conf,
                    'improvement_percent': ((enhanced_conf - original_conf) / original_conf * 100) if original_conf > 0 else 0
                }
        
        return impact
    
    def _calculate_enhanced_quality_metrics(self, enhanced_predictions: dict) -> dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        metrics = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        final_score = enhanced_predictions.get('final_score', 0.5)
        metrics['enhanced_overall_quality'] = final_score
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        for model_name, prediction in enhanced_predictions.items():
            if model_name in ['fashion_clip', 'yolo', 'deepfashion']:
                enhanced_conf = prediction.get('calibrated_confidence', prediction.get('confidence', 0.0))
                metrics[f'{model_name}_enhanced_score'] = enhanced_conf
        
        # –í–ª–∏—è–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
        metrics['enhancement_impact'] = self._calculate_enhancement_impact(enhanced_predictions)
        
        return metrics
    
    def _generate_enhanced_summary(self, integrated: dict) -> dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞"""
        summary = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        style_analysis = integrated.get('style_analysis', {})
        garment_classification = integrated.get('garment_classification', {})
        object_detection = integrated.get('object_detection', {})
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        summary['description'] = self._create_enhanced_description(
            style_analysis, garment_classification, object_detection
        )
        
        # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        style_conf = style_analysis.get('enhanced_confidence', style_analysis.get('style_confidence', 0.0))
        garment_conf = garment_classification.get('enhanced_confidence', garment_classification.get('confidence', 0.0))
        detection_conf = object_detection.get('enhanced_confidence', 0.0)
        
        summary['enhanced_confidence_level'] = np.mean([style_conf, garment_conf, detection_conf])
        summary['analysis_depth'] = 'enhanced_specialized'  # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        
        return summary
    
    def _create_enhanced_description(self, style_analysis: dict, garment_classification: dict, object_detection: dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        parts = []
        
        # –°—Ç–∏–ª—å –∏ –º–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (FashionCLIP) —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        if style_analysis.get('style') and style_analysis['style'] != 'unknown':
            enhanced_conf = style_analysis.get('enhanced_confidence', style_analysis.get('style_confidence', 0.0))
            parts.append(f"üé® –°—Ç–∏–ª—å: {style_analysis['style']} ({enhanced_conf:.1%})")
        
        if style_analysis.get('material') and style_analysis['material'] != 'unknown':
            parts.append(f"üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª: {style_analysis['material']}")
        
        if style_analysis.get('color') and style_analysis['color'] != 'unknown':
            parts.append(f"üé® –¶–≤–µ—Ç: {style_analysis['color']}")
        
        if style_analysis.get('season') and style_analysis['season'] != 'unknown':
            parts.append(f"üå§Ô∏è –°–µ–∑–æ–Ω: {style_analysis['season']}")
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–µ–∂–¥—ã (DeepFashion CNN) —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        if garment_classification.get('category') and garment_classification['category'] != 'unknown':
            enhanced_conf = garment_classification.get('enhanced_confidence', garment_classification.get('confidence', 0.0))
            parts.append(f"üëï –¢–∏–ø: {garment_classification['category']} ({enhanced_conf:.1%})")
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (YOLO) —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        if object_detection.get('total_objects', 0) > 0:
            parts.append(f"üîç –û–±—ä–µ–∫—Ç–æ–≤: {object_detection['total_objects']}")
        
        if object_detection.get('layout') and object_detection['layout'] != 'unknown':
            parts.append(f"üìê –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: {object_detection['layout']}")
        
        return " | ".join(parts) if parts else "–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —á–µ—Ç–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    
    def _combine_results(self, clip: dict, yolo: dict, deepfashion: dict, image: Image.Image) -> dict:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        
        analysis = {
            'models_used': ['FashionCLIP', 'YOLO', 'DeepFashion CNN'],
            'timestamp': np.datetime64('now'),
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        analysis['fashion_clip'] = clip
        analysis['yolo_detection'] = yolo
        analysis['deepfashion_analysis'] = deepfashion
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        integrated = self._create_integrated_analysis(clip, yolo, deepfashion, image)
        analysis['integrated_analysis'] = integrated
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
        analysis['quality_metrics'] = self._calculate_quality_metrics(clip, yolo, deepfashion)
        
        return analysis
    
    def _create_integrated_analysis(self, clip: dict, yolo: dict, deepfashion: dict, image: Image.Image) -> dict:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        integrated = {}
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: FashionCLIP - —Å—Ç–∏–ª—å, —Ü–≤–µ—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª, —Å–µ–∑–æ–Ω
        if 'error' not in clip:
            integrated['style_analysis'] = {
                'style': clip.get('style_occasion', {}).get('best_match', {}).get('item', 'unknown'),
                'style_confidence': clip.get('style_occasion', {}).get('best_match', {}).get('confidence', 0.0),
                'material': clip.get('material_fabric', {}).get('best_match', {}).get('item', 'unknown'),
                'material_confidence': clip.get('material_fabric', {}).get('best_match', {}).get('confidence', 0.0),
                'color': clip.get('color_pattern', {}).get('best_match', {}).get('item', 'unknown'),
                'color_confidence': clip.get('color_pattern', {}).get('best_match', {}).get('confidence', 0.0),
                'season': clip.get('season_weather', {}).get('best_match', {}).get('item', 'unknown'),
                'season_confidence': clip.get('season_weather', {}).get('best_match', {}).get('confidence', 0.0),
                'price_range': clip.get('price_range', {}).get('best_match', {}).get('item', 'unknown'),
                'price_confidence': clip.get('price_range', {}).get('best_match', {}).get('confidence', 0.0)
            }
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: DeepFashion CNN - —Ç–∏–ø –æ–¥–µ–∂–¥—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ñ–æ—Ä–º–∞
        if 'error' not in deepfashion:
            integrated['garment_classification'] = {
                'category': deepfashion.get('category', 'unknown'),
                'confidence': deepfashion.get('confidence', 0.0),
                'top_predictions': deepfashion.get('top_predictions', []),
                'model': 'DeepFashion CNN'
            }
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: YOLO - –¥–µ—Ç–µ–∫—Ü–∏—è, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        if 'error' not in yolo:
            integrated['object_detection'] = {
                'total_objects': yolo.get('total_items', 0),
                'layout': yolo.get('composition', {}).get('layout', 'unknown'),
                'dominant_region': yolo.get('composition', {}).get('dominant_region', 'unknown'),
                'has_clothing': yolo.get('has_clothing', False),
                'detection_confidence': yolo.get('confidence', 0.0)
            }
        
        # –°–≤–æ–¥–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        integrated['summary'] = self._generate_summary(integrated)
        
        return integrated
    
    def _calculate_quality_metrics(self, clip: dict, yolo: dict, deepfashion: dict) -> dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        metrics = {}
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò
        
        # FashionCLIP - —Å—Ç–∏–ª—å –∏ –º–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if 'error' not in clip:
            style_confidence = clip.get('style_occasion', {}).get('best_match', {}).get('confidence', 0.0)
            material_confidence = clip.get('material_fabric', {}).get('best_match', {}).get('confidence', 0.0)
            color_confidence = clip.get('color_pattern', {}).get('best_match', {}).get('confidence', 0.0)
            metrics['style_analysis_score'] = np.mean([style_confidence, material_confidence, color_confidence])
        else:
            metrics['style_analysis_score'] = 0.0
        
        # DeepFashion CNN - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–µ–∂–¥—ã
        if 'error' not in deepfashion:
            metrics['garment_classification_score'] = deepfashion.get('confidence', 0.0)
        else:
            metrics['garment_classification_score'] = 0.0
        
        # YOLO - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        if 'error' not in yolo:
            metrics['object_detection_score'] = min(1.0, yolo.get('total_items', 0) * 0.3)
            metrics['has_clothing'] = yolo.get('has_clothing', False)
        else:
            metrics['object_detection_score'] = 0.0
            metrics['has_clothing'] = False
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –í–ï–°–ê
        weights = {
            'style_analysis_score': 0.4,      # FashionCLIP - —Å—Ç–∏–ª—å
            'garment_classification_score': 0.3,  # DeepFashion - –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            'object_detection_score': 0.3     # YOLO - –¥–µ—Ç–µ–∫—Ü–∏—è
        }
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        weighted_scores = []
        for metric, weight in weights.items():
            if metric in metrics:
                weighted_scores.append(metrics[metric] * weight)
        
        metrics['overall_quality'] = np.sum(weighted_scores) if weighted_scores else 0.5
        metrics['specialization_weights'] = weights
        
        return metrics
    
    def _generate_summary(self, integrated: dict) -> dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞ —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        summary = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        style_analysis = integrated.get('style_analysis', {})
        garment_classification = integrated.get('garment_classification', {})
        object_detection = integrated.get('object_detection', {})
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        summary['description'] = self._create_specialized_description(
            style_analysis, garment_classification, object_detection
        )
        
        # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        style_conf = style_analysis.get('style_confidence', 0.0)
        garment_conf = garment_classification.get('confidence', 0.0)
        detection_conf = object_detection.get('detection_confidence', 0.0)
        
        summary['confidence_level'] = np.mean([style_conf, garment_conf, detection_conf])
        summary['analysis_depth'] = 'specialized'  # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        
        return summary
    
    def _create_specialized_description(self, style_analysis: dict, garment_classification: dict, object_detection: dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        parts = []
        
        # –°—Ç–∏–ª—å –∏ –º–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (FashionCLIP)
        if style_analysis.get('style') and style_analysis['style'] != 'unknown':
            parts.append(f"üé® –°—Ç–∏–ª—å: {style_analysis['style']}")
        
        if style_analysis.get('material') and style_analysis['material'] != 'unknown':
            parts.append(f"üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª: {style_analysis['material']}")
        
        if style_analysis.get('color') and style_analysis['color'] != 'unknown':
            parts.append(f"üé® –¶–≤–µ—Ç: {style_analysis['color']}")
        
        if style_analysis.get('season') and style_analysis['season'] != 'unknown':
            parts.append(f"üå§Ô∏è –°–µ–∑–æ–Ω: {style_analysis['season']}")
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–µ–∂–¥—ã (DeepFashion CNN)
        if garment_classification.get('category') and garment_classification['category'] != 'unknown':
            parts.append(f"üëï –¢–∏–ø: {garment_classification['category']}")
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (YOLO)
        if object_detection.get('total_objects', 0) > 0:
            parts.append(f"üîç –û–±—ä–µ–∫—Ç–æ–≤: {object_detection['total_objects']}")
        
        if object_detection.get('layout') and object_detection['layout'] != 'unknown':
            parts.append(f"üìê –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: {object_detection['layout']}")
        
        return " | ".join(parts) if parts else "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —á–µ—Ç–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    
    def get_detailed_description(self, analysis: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if 'error' in analysis:
            return f"‚ùå –û—à–∏–±–∫–∞: {analysis['error']}"
        
        integrated = analysis.get('integrated_analysis', {})
        summary = integrated.get('summary', {})
        metrics = analysis.get('quality_metrics', {})
        
        description = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if 'description' in summary:
            description.append(f"üìã **–û–ü–ò–°–ê–ù–ò–ï:** {summary['description']}")
        
        # –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –î–ï–¢–ê–õ–ò
        description.append("\nüîç **–°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ê–ù–ê–õ–ò–ó:**")
        
        # FashionCLIP - —Å—Ç–∏–ª—å –∏ –º–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if 'style_analysis' in integrated:
            style = integrated['style_analysis']
            description.append("\nüé® **–°–¢–ò–õ–¨ –ò –ú–û–î–ê (FashionCLIP):**")
            if style.get('style') != 'unknown':
                description.append(f"  ‚Ä¢ –°—Ç–∏–ª—å: {style['style']} ({style.get('style_confidence', 0):.1%})")
            if style.get('material') != 'unknown':
                description.append(f"  ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: {style['material']} ({style.get('material_confidence', 0):.1%})")
            if style.get('color') != 'unknown':
                description.append(f"  ‚Ä¢ –¶–≤–µ—Ç: {style['color']} ({style.get('color_confidence', 0):.1%})")
            if style.get('season') != 'unknown':
                description.append(f"  ‚Ä¢ –°–µ–∑–æ–Ω: {style['season']} ({style.get('season_confidence', 0):.1%})")
        
        # DeepFashion CNN - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–µ–∂–¥—ã
        if 'garment_classification' in integrated:
            garment = integrated['garment_classification']
            description.append(f"\nüëï **–ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø (DeepFashion CNN):**")
            description.append(f"  ‚Ä¢ –¢–∏–ø: {garment.get('category', 'unknown')} ({garment.get('confidence', 0):.1%})")
            if garment.get('top_predictions'):
                description.append("  ‚Ä¢ –¢–æ–ø-3 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
                for i, pred in enumerate(garment['top_predictions'][:3]):
                    description.append(f"    {i+1}. {pred['category']} ({pred['confidence']:.1%})")
        
        # YOLO - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        if 'object_detection' in integrated:
            detection = integrated['object_detection']
            description.append(f"\nüîç **–î–ï–¢–ï–ö–¶–ò–Ø (YOLO):**")
            description.append(f"  ‚Ä¢ –û–±—ä–µ–∫—Ç–æ–≤: {detection.get('total_objects', 0)}")
            description.append(f"  ‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: {detection.get('layout', 'unknown')}")
            description.append(f"  ‚Ä¢ –û–±–ª–∞—Å—Ç—å: {detection.get('dominant_region', 'unknown')}")
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        description.append(f"\nüìä **–°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ö–ê–ß–ï–°–¢–í–û:**")
        if 'specialization_weights' in metrics:
            weights = metrics['specialization_weights']
            description.append(f"  ‚Ä¢ –°—Ç–∏–ª—å (FashionCLIP): {metrics.get('style_analysis_score', 0):.1%} (–≤–µ—Å: {weights['style_analysis_score']:.1%})")
            description.append(f"  ‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (DeepFashion): {metrics.get('garment_classification_score', 0):.1%} (–≤–µ—Å: {weights['garment_classification_score']:.1%})")
            description.append(f"  ‚Ä¢ –î–µ—Ç–µ–∫—Ü–∏—è (YOLO): {metrics.get('object_detection_score', 0):.1%} (–≤–µ—Å: {weights['object_detection_score']:.1%})")
        
        description.append(f"\nüéØ **–û–ë–©–ï–ï –ö–ê–ß–ï–°–¢–í–û:** {metrics.get('overall_quality', 0):.1%}")
        
        return "\n".join(description)